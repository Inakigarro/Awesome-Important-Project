{
    "pipes": [],
    "interfaces": [
        {
            "name": "AuthResponse",
            "id": "interface-AuthResponse-3c5cc536106e1c06b52bdd7f6592799d16aa078237bfaa504146db4a1d674e1ac8100d3e22607753df8b0216f1ebd01fb3ebf7483279e7dd8552838048ab1d01",
            "file": "src/app/auth/auth.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { BehaviorSubject, Observable, tap, firstValueFrom } from \"rxjs\";\r\n\r\nexport interface LoginRequest {\r\n\temail: string;\r\n\tpassword: string;\r\n}\r\n\r\nexport interface RegisterRequest {\r\n\tnombre: string;\r\n\tapellido: string;\r\n\ttelefono: string;\r\n\tusername: string;\r\n\temail: string;\r\n\tpassword: string;\r\n}\r\n\r\nexport interface AuthResponse {\r\n\ttoken: string;\r\n\trefreshToken: string;\r\n\tuserName: string;\r\n\troles: string[];\r\n\tsocio: {\r\n\t\tid: string;\r\n\t\tnumeroSocio: number;\r\n\t\tnombre: string;\r\n\t\tapellido: string;\r\n\t\ttelefono: string;\r\n\t\temail: string;\r\n\t};\r\n}\r\n\r\nexport interface UserData {\r\n\tuserName: string;\r\n\temail: string;\r\n\troles: string[];\r\n\tsocio: {\r\n\t\tid: string;\r\n\t\tnumeroSocio: number;\r\n\t\tnombre: string;\r\n\t\tapellido: string;\r\n\t\ttelefono: string;\r\n\t\temail: string;\r\n\t};\r\n}\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class AuthService {\r\n\tprivate readonly authUrl = \"https://localhost:7259/api/auth\";\r\n\tprivate readonly sociosUrl = \"https://localhost:7259/api/socios\";\r\n\tpublic userLoggedIn = new BehaviorSubject<boolean>(false);\r\n\tpublic userData = new BehaviorSubject<UserData | null>(null);\r\n\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\tlogin(data: LoginRequest): Observable<AuthResponse> {\r\n\t\treturn this.http\r\n\t\t\t.post<AuthResponse>(`${this.sociosUrl}/iniciar-sesion`, data)\r\n\t\t\t.pipe(tap((res) => this.saveTokens(res)));\r\n\t}\r\n\r\n\tregister(data: RegisterRequest): Observable<AuthResponse> {\r\n\t\treturn this.http\r\n\t\t\t.post<AuthResponse>(`${this.sociosUrl}`, data)\r\n\t\t\t.pipe(tap((res) => this.saveTokens(res)));\r\n\t}\r\n\r\n\tprivate saveTokens(res: AuthResponse): void {\r\n\t\tlocalStorage.setItem(\"token\", res.token);\r\n\t\tlocalStorage.setItem(\"refreshToken\", res.refreshToken);\r\n\t}\r\n\r\n\tgetToken(): string | null {\r\n\t\treturn localStorage.getItem(\"token\");\r\n\t}\r\n\r\n\tgetRefreshToken(): string | null {\r\n\t\treturn localStorage.getItem(\"refreshToken\");\r\n\t}\r\n\r\n\tclearSession(): void {\r\n\t\tlocalStorage.removeItem(\"token\");\r\n\t\tlocalStorage.removeItem(\"refreshToken\");\r\n\t\tthis.userLoggedIn.next(false);\r\n\t\tthis.userData.next(null);\r\n\t}\r\n\r\n\tasync loadUserFromToken(): Promise<UserData | null> {\r\n\t\tconst token = this.getToken();\r\n\t\tif (!token) {\r\n\t\t\tthis.userLoggedIn.next(false);\r\n\t\t\tthis.userData.next(null);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tconst user = await firstValueFrom(\r\n\t\t\t\tthis.http.get<UserData>(`${this.sociosUrl}/me`)\r\n\t\t\t);\r\n\t\t\tif (user) {\r\n\t\t\t\tthis.userLoggedIn.next(true);\r\n\t\t\t\tthis.userData.next(user);\r\n\t\t\t\treturn user;\r\n\t\t\t} else {\r\n\t\t\t\tthis.clearSession();\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t} catch {\r\n\t\t\tthis.clearSession();\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n}\r\n",
            "properties": [
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "socio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "userName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AuthState",
            "id": "interface-AuthState-8b98436fea849d5bfb4a1cb1f4272dc718cdd7130551f30d26e911a5faf39aa2a58eaf59e22a2e682898809943c57c7bec31bbdd5ae9fb29d659d55fd64cf8a0",
            "file": "src/app/auth/state/auth.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from \"@ngrx/store\";\r\nimport * as AuthActions from \"./auth.actions\";\r\nimport { UserData } from \"../auth.service\";\r\n\r\nexport interface AuthState {\r\n\ttoken: string | null;\r\n\trefreshToken: string | null;\r\n\tuserData: UserData | null;\r\n\tloading: boolean;\r\n}\r\n\r\nexport const initialAuthState: AuthState = {\r\n\ttoken: null,\r\n\trefreshToken: null,\r\n\tuserData: null,\r\n\tloading: false,\r\n};\r\n\r\nexport const authReducer = createReducer(\r\n\tinitialAuthState,\r\n\ton(AuthActions.LoginActions.success, (state, action) => ({\r\n\t\t...state,\r\n\t\ttoken: action.token,\r\n\t\trefreshToken: action.refreshToken,\r\n\t\tuserData: action.userData,\r\n\t\tloading: false,\r\n\t})),\r\n\ton(AuthActions.setAuthTokens, (state, { token, refreshToken }) => ({\r\n\t\t...state,\r\n\t\ttoken,\r\n\t\trefreshToken,\r\n\t})),\r\n\ton(AuthActions.clearAuth, () => initialAuthState),\r\n\ton(AuthActions.setUserData, (state, { userData }) => ({\r\n\t\t...state,\r\n\t\tuserData,\r\n\t})),\r\n\ton(AuthActions.loadUserFromToken, (state) => ({ ...state, loading: true })),\r\n\ton(AuthActions.loadUserFromTokenSuccess, (state, { userData }) => ({\r\n\t\t...state,\r\n\t\tuserData,\r\n\t\tloading: false,\r\n\t})),\r\n\ton(AuthActions.loadUserFromTokenFailure, (state) => ({\r\n\t\t...state,\r\n\t\tuserData: null,\r\n\t\tloading: false,\r\n\t}))\r\n);\r\n",
            "properties": [
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "userData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserData | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ButtonBase",
            "id": "interface-ButtonBase-3a9a101526d91567ac94f7fc373cb23e5a9dad33a4929471bb9b70bdf23bb8e7b9b7fe35ce541684090eb611f19238d73eef33fc0922e3f67d07bee4d0c4a00b",
            "file": "src/app/components/buttons/button.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ButtonBase {\r\n\tlabel: string;\r\n\ticon?: string;\r\n\ttype?: \"button\" | \"submit\" | \"reset\";\r\n\tcolor?: \"primary\" | \"accent\" | \"warn\" | \"neutral\" | string;\r\n\tdisabled?: boolean;\r\n\tloading?: boolean;\r\n}\r\n\r\nexport interface ButtonWithId extends ButtonBase {\r\n\tid: string;\r\n}\r\n\r\nexport interface ButtonClickEvent {\r\n\tbutton: ButtonWithId;\r\n\tindex?: number;\r\n\tcontext?: any;\r\n}\r\n\r\n// Para compatibilidad con los botones del topbar\r\nexport type TopbarButton = ButtonWithId;\r\nexport type TopbarButtonClickEvent = ButtonClickEvent;\r\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"primary\" | \"accent\" | \"warn\" | \"neutral\" | string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ButtonClickEvent",
            "id": "interface-ButtonClickEvent-3a9a101526d91567ac94f7fc373cb23e5a9dad33a4929471bb9b70bdf23bb8e7b9b7fe35ce541684090eb611f19238d73eef33fc0922e3f67d07bee4d0c4a00b",
            "file": "src/app/components/buttons/button.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ButtonBase {\r\n\tlabel: string;\r\n\ticon?: string;\r\n\ttype?: \"button\" | \"submit\" | \"reset\";\r\n\tcolor?: \"primary\" | \"accent\" | \"warn\" | \"neutral\" | string;\r\n\tdisabled?: boolean;\r\n\tloading?: boolean;\r\n}\r\n\r\nexport interface ButtonWithId extends ButtonBase {\r\n\tid: string;\r\n}\r\n\r\nexport interface ButtonClickEvent {\r\n\tbutton: ButtonWithId;\r\n\tindex?: number;\r\n\tcontext?: any;\r\n}\r\n\r\n// Para compatibilidad con los botones del topbar\r\nexport type TopbarButton = ButtonWithId;\r\nexport type TopbarButtonClickEvent = ButtonClickEvent;\r\n",
            "properties": [
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonWithId",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "context",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ButtonWithId",
            "id": "interface-ButtonWithId-3a9a101526d91567ac94f7fc373cb23e5a9dad33a4929471bb9b70bdf23bb8e7b9b7fe35ce541684090eb611f19238d73eef33fc0922e3f67d07bee4d0c4a00b",
            "file": "src/app/components/buttons/button.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ButtonBase {\r\n\tlabel: string;\r\n\ticon?: string;\r\n\ttype?: \"button\" | \"submit\" | \"reset\";\r\n\tcolor?: \"primary\" | \"accent\" | \"warn\" | \"neutral\" | string;\r\n\tdisabled?: boolean;\r\n\tloading?: boolean;\r\n}\r\n\r\nexport interface ButtonWithId extends ButtonBase {\r\n\tid: string;\r\n}\r\n\r\nexport interface ButtonClickEvent {\r\n\tbutton: ButtonWithId;\r\n\tindex?: number;\r\n\tcontext?: any;\r\n}\r\n\r\n// Para compatibilidad con los botones del topbar\r\nexport type TopbarButton = ButtonWithId;\r\nexport type TopbarButtonClickEvent = ButtonClickEvent;\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "ButtonBase"
            ]
        },
        {
            "name": "LoginRequest",
            "id": "interface-LoginRequest-3c5cc536106e1c06b52bdd7f6592799d16aa078237bfaa504146db4a1d674e1ac8100d3e22607753df8b0216f1ebd01fb3ebf7483279e7dd8552838048ab1d01",
            "file": "src/app/auth/auth.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { BehaviorSubject, Observable, tap, firstValueFrom } from \"rxjs\";\r\n\r\nexport interface LoginRequest {\r\n\temail: string;\r\n\tpassword: string;\r\n}\r\n\r\nexport interface RegisterRequest {\r\n\tnombre: string;\r\n\tapellido: string;\r\n\ttelefono: string;\r\n\tusername: string;\r\n\temail: string;\r\n\tpassword: string;\r\n}\r\n\r\nexport interface AuthResponse {\r\n\ttoken: string;\r\n\trefreshToken: string;\r\n\tuserName: string;\r\n\troles: string[];\r\n\tsocio: {\r\n\t\tid: string;\r\n\t\tnumeroSocio: number;\r\n\t\tnombre: string;\r\n\t\tapellido: string;\r\n\t\ttelefono: string;\r\n\t\temail: string;\r\n\t};\r\n}\r\n\r\nexport interface UserData {\r\n\tuserName: string;\r\n\temail: string;\r\n\troles: string[];\r\n\tsocio: {\r\n\t\tid: string;\r\n\t\tnumeroSocio: number;\r\n\t\tnombre: string;\r\n\t\tapellido: string;\r\n\t\ttelefono: string;\r\n\t\temail: string;\r\n\t};\r\n}\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class AuthService {\r\n\tprivate readonly authUrl = \"https://localhost:7259/api/auth\";\r\n\tprivate readonly sociosUrl = \"https://localhost:7259/api/socios\";\r\n\tpublic userLoggedIn = new BehaviorSubject<boolean>(false);\r\n\tpublic userData = new BehaviorSubject<UserData | null>(null);\r\n\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\tlogin(data: LoginRequest): Observable<AuthResponse> {\r\n\t\treturn this.http\r\n\t\t\t.post<AuthResponse>(`${this.sociosUrl}/iniciar-sesion`, data)\r\n\t\t\t.pipe(tap((res) => this.saveTokens(res)));\r\n\t}\r\n\r\n\tregister(data: RegisterRequest): Observable<AuthResponse> {\r\n\t\treturn this.http\r\n\t\t\t.post<AuthResponse>(`${this.sociosUrl}`, data)\r\n\t\t\t.pipe(tap((res) => this.saveTokens(res)));\r\n\t}\r\n\r\n\tprivate saveTokens(res: AuthResponse): void {\r\n\t\tlocalStorage.setItem(\"token\", res.token);\r\n\t\tlocalStorage.setItem(\"refreshToken\", res.refreshToken);\r\n\t}\r\n\r\n\tgetToken(): string | null {\r\n\t\treturn localStorage.getItem(\"token\");\r\n\t}\r\n\r\n\tgetRefreshToken(): string | null {\r\n\t\treturn localStorage.getItem(\"refreshToken\");\r\n\t}\r\n\r\n\tclearSession(): void {\r\n\t\tlocalStorage.removeItem(\"token\");\r\n\t\tlocalStorage.removeItem(\"refreshToken\");\r\n\t\tthis.userLoggedIn.next(false);\r\n\t\tthis.userData.next(null);\r\n\t}\r\n\r\n\tasync loadUserFromToken(): Promise<UserData | null> {\r\n\t\tconst token = this.getToken();\r\n\t\tif (!token) {\r\n\t\t\tthis.userLoggedIn.next(false);\r\n\t\t\tthis.userData.next(null);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tconst user = await firstValueFrom(\r\n\t\t\t\tthis.http.get<UserData>(`${this.sociosUrl}/me`)\r\n\t\t\t);\r\n\t\t\tif (user) {\r\n\t\t\t\tthis.userLoggedIn.next(true);\r\n\t\t\t\tthis.userData.next(user);\r\n\t\t\t\treturn user;\r\n\t\t\t} else {\r\n\t\t\t\tthis.clearSession();\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t} catch {\r\n\t\t\tthis.clearSession();\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "NavigationState",
            "id": "interface-NavigationState-bba4f6536152ccaa18b975fa9ce446a270f9ce9ad8aef26135ddc4971d5facca5f484f16ff8fa0b3379d184395c027946dab60199af4cb297cfb7845e2e0b839",
            "file": "src/app/navigation.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport {\r\n\tRouter,\r\n\tNavigationEnd,\r\n\tEvent as NavigationEvent,\r\n} from \"@angular/router\";\r\nimport { filter, pairwise, startWith, map } from \"rxjs/operators\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\n\r\nexport interface NavigationState {\r\n\tpreviousUrl: string | null;\r\n\tcurrentUrl: string;\r\n\tnextUrl: string | null;\r\n\tisSubroute: boolean;\r\n\tisFullRouteChange: boolean;\r\n}\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class NavigationService {\r\n\tprivate previousUrl: string | null = null;\r\n\tprivate currentUrl: string = \"\";\r\n\tprivate nextUrl: string | null = null;\r\n\tprivate navigationState$ = new BehaviorSubject<NavigationState>({\r\n\t\tpreviousUrl: null,\r\n\t\tcurrentUrl: \"\",\r\n\t\tnextUrl: null,\r\n\t\tisSubroute: false,\r\n\t\tisFullRouteChange: false,\r\n\t});\r\n\r\n\tconstructor(private router: Router) {\r\n\t\tthis.router.events\r\n\t\t\t.pipe(\r\n\t\t\t\tfilter(\r\n\t\t\t\t\t(event: NavigationEvent): event is NavigationEnd =>\r\n\t\t\t\t\t\tevent instanceof NavigationEnd\r\n\t\t\t\t),\r\n\t\t\t\tstartWith({ urlAfterRedirects: this.router.url } as NavigationEnd),\r\n\t\t\t\tpairwise()\r\n\t\t\t)\r\n\t\t\t.subscribe(([prev, curr]: [NavigationEnd, NavigationEnd]) => {\r\n\t\t\t\tthis.previousUrl = prev.urlAfterRedirects;\r\n\t\t\t\tthis.currentUrl = curr.urlAfterRedirects;\r\n\t\t\t\tthis.nextUrl = null;\r\n\t\t\t\tconst isSubroute = this.isSubroute(this.previousUrl, this.currentUrl);\r\n\t\t\t\tconst isFullRouteChange = !isSubroute;\r\n\t\t\t\tthis.navigationState$.next({\r\n\t\t\t\t\tpreviousUrl: this.previousUrl,\r\n\t\t\t\t\tcurrentUrl: this.currentUrl,\r\n\t\t\t\t\tnextUrl: null,\r\n\t\t\t\t\tisSubroute,\r\n\t\t\t\t\tisFullRouteChange,\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t}\r\n\r\n\tpublic getNavigationState() {\r\n\t\treturn this.navigationState$.asObservable();\r\n\t}\r\n\r\n\tpublic getCurrentUrl(): string {\r\n\t\treturn this.currentUrl;\r\n\t}\r\n\r\n\tpublic getPreviousUrl(): string | null {\r\n\t\treturn this.previousUrl;\r\n\t}\r\n\r\n\tpublic navigate(url: string): void {\r\n\t\tthis.nextUrl = url;\r\n\t\tconst isSubroute = this.isSubroute(this.currentUrl, url);\r\n\t\tconst isFullRouteChange = !isSubroute;\r\n\t\tthis.navigationState$.next({\r\n\t\t\tpreviousUrl: this.currentUrl,\r\n\t\t\tcurrentUrl: url,\r\n\t\t\tnextUrl: url,\r\n\t\t\tisSubroute,\r\n\t\t\tisFullRouteChange,\r\n\t\t});\r\n\t\tthis.router.navigateByUrl(url);\r\n\t}\r\n\r\n\tprivate isSubroute(from: string | null, to: string): boolean {\r\n\t\tif (!from) return false;\r\n\t\t// Considera subruta si el inicio de la ruta es igual y solo cambia el segmento final\r\n\t\tconst fromSegments = from.split(\"/\").filter(Boolean);\r\n\t\tconst toSegments = to.split(\"/\").filter(Boolean);\r\n\t\tif (fromSegments.length === 0 || toSegments.length === 0) return false;\r\n\t\tif (fromSegments[0] !== toSegments[0]) return false;\r\n\t\t// Si solo cambia el último segmento o se agrega uno, es subruta\r\n\t\tif (\r\n\t\t\ttoSegments.length > fromSegments.length &&\r\n\t\t\ttoSegments.slice(0, fromSegments.length).join(\"/\") ===\r\n\t\t\t\tfromSegments.join(\"/\")\r\n\t\t) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (\r\n\t\t\tfromSegments.length > toSegments.length &&\r\n\t\t\tfromSegments.slice(0, toSegments.length).join(\"/\") ===\r\n\t\t\t\ttoSegments.join(\"/\")\r\n\t\t) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n}\r\n",
            "properties": [
                {
                    "name": "currentUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "isFullRouteChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isSubroute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "nextUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "previousUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RegisterRequest",
            "id": "interface-RegisterRequest-3c5cc536106e1c06b52bdd7f6592799d16aa078237bfaa504146db4a1d674e1ac8100d3e22607753df8b0216f1ebd01fb3ebf7483279e7dd8552838048ab1d01",
            "file": "src/app/auth/auth.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { BehaviorSubject, Observable, tap, firstValueFrom } from \"rxjs\";\r\n\r\nexport interface LoginRequest {\r\n\temail: string;\r\n\tpassword: string;\r\n}\r\n\r\nexport interface RegisterRequest {\r\n\tnombre: string;\r\n\tapellido: string;\r\n\ttelefono: string;\r\n\tusername: string;\r\n\temail: string;\r\n\tpassword: string;\r\n}\r\n\r\nexport interface AuthResponse {\r\n\ttoken: string;\r\n\trefreshToken: string;\r\n\tuserName: string;\r\n\troles: string[];\r\n\tsocio: {\r\n\t\tid: string;\r\n\t\tnumeroSocio: number;\r\n\t\tnombre: string;\r\n\t\tapellido: string;\r\n\t\ttelefono: string;\r\n\t\temail: string;\r\n\t};\r\n}\r\n\r\nexport interface UserData {\r\n\tuserName: string;\r\n\temail: string;\r\n\troles: string[];\r\n\tsocio: {\r\n\t\tid: string;\r\n\t\tnumeroSocio: number;\r\n\t\tnombre: string;\r\n\t\tapellido: string;\r\n\t\ttelefono: string;\r\n\t\temail: string;\r\n\t};\r\n}\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class AuthService {\r\n\tprivate readonly authUrl = \"https://localhost:7259/api/auth\";\r\n\tprivate readonly sociosUrl = \"https://localhost:7259/api/socios\";\r\n\tpublic userLoggedIn = new BehaviorSubject<boolean>(false);\r\n\tpublic userData = new BehaviorSubject<UserData | null>(null);\r\n\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\tlogin(data: LoginRequest): Observable<AuthResponse> {\r\n\t\treturn this.http\r\n\t\t\t.post<AuthResponse>(`${this.sociosUrl}/iniciar-sesion`, data)\r\n\t\t\t.pipe(tap((res) => this.saveTokens(res)));\r\n\t}\r\n\r\n\tregister(data: RegisterRequest): Observable<AuthResponse> {\r\n\t\treturn this.http\r\n\t\t\t.post<AuthResponse>(`${this.sociosUrl}`, data)\r\n\t\t\t.pipe(tap((res) => this.saveTokens(res)));\r\n\t}\r\n\r\n\tprivate saveTokens(res: AuthResponse): void {\r\n\t\tlocalStorage.setItem(\"token\", res.token);\r\n\t\tlocalStorage.setItem(\"refreshToken\", res.refreshToken);\r\n\t}\r\n\r\n\tgetToken(): string | null {\r\n\t\treturn localStorage.getItem(\"token\");\r\n\t}\r\n\r\n\tgetRefreshToken(): string | null {\r\n\t\treturn localStorage.getItem(\"refreshToken\");\r\n\t}\r\n\r\n\tclearSession(): void {\r\n\t\tlocalStorage.removeItem(\"token\");\r\n\t\tlocalStorage.removeItem(\"refreshToken\");\r\n\t\tthis.userLoggedIn.next(false);\r\n\t\tthis.userData.next(null);\r\n\t}\r\n\r\n\tasync loadUserFromToken(): Promise<UserData | null> {\r\n\t\tconst token = this.getToken();\r\n\t\tif (!token) {\r\n\t\t\tthis.userLoggedIn.next(false);\r\n\t\t\tthis.userData.next(null);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tconst user = await firstValueFrom(\r\n\t\t\t\tthis.http.get<UserData>(`${this.sociosUrl}/me`)\r\n\t\t\t);\r\n\t\t\tif (user) {\r\n\t\t\t\tthis.userLoggedIn.next(true);\r\n\t\t\t\tthis.userData.next(user);\r\n\t\t\t\treturn user;\r\n\t\t\t} else {\r\n\t\t\t\tthis.clearSession();\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t} catch {\r\n\t\t\tthis.clearSession();\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n}\r\n",
            "properties": [
                {
                    "name": "apellido",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "telefono",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TopbarButton",
            "id": "interface-TopbarButton-8d3a722c35a99b724c7afeffb13973291ad2751a0a1625803c1331b6457a44a48360f7950f752295239a4246383c9528fbc095319f6db0aa6b06115e7326cc81",
            "file": "src/app/topbar/topbar.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, Output, EventEmitter, OnInit } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { BreakpointObserver } from \"@angular/cdk/layout\";\r\nimport { AppButtonComponent } from \"../components/buttons/button.component\";\r\n\r\nexport interface TopbarButton {\r\n\tid: string;\r\n\tlabel: string;\r\n\ticon?: string;\r\n\tdisabled?: boolean;\r\n}\r\n\r\n@Component({\r\n\tselector: \"app-topbar\",\r\n\tstandalone: true,\r\n\timports: [CommonModule, AppButtonComponent],\r\n\ttemplateUrl: \"./topbar.component.html\",\r\n\tstyleUrl: \"./topbar.component.scss\",\r\n})\r\nexport class TopbarComponent implements OnInit {\r\n\t@Input() title: string = \"\";\r\n\t@Input() mainButton!: TopbarButton;\r\n\t@Input() secondaryButtons: TopbarButton[] = [];\r\n\r\n\t@Output() buttonClick = new EventEmitter<{\r\n\t\tbutton: TopbarButton;\r\n\t\tindex: number;\r\n\t\ttype: \"main\" | \"secondary\";\r\n\t}>();\r\n\r\n\tdarkTheme = false;\r\n\tshowMenuButton = false;\r\n\tshowMenu = false;\r\n\r\n\tconstructor(private breakpointObserver: BreakpointObserver) {}\r\n\r\n\tngOnInit() {\r\n\t\t// Leer preferencia de tema guardada\r\n\t\tconst savedTheme = localStorage.getItem(\"theme\");\r\n\t\tif (savedTheme === \"dark\") {\r\n\t\t\tthis.darkTheme = true;\r\n\t\t\tdocument.body.classList.add(\"dark-theme\");\r\n\t\t} else {\r\n\t\t\tthis.darkTheme = false;\r\n\t\t\tdocument.body.classList.remove(\"dark-theme\");\r\n\t\t}\r\n\t\tthis.breakpointObserver\r\n\t\t\t.observe([\"(max-width: 900px)\", \"(max-width: 600px)\"])\r\n\t\t\t.subscribe((result) => {\r\n\t\t\t\tif (result.matches) {\r\n\t\t\t\t\tthis.showMenuButton = true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.showMenuButton = false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\r\n\r\n\ttoggleTheme() {\r\n\t\tthis.darkTheme = !this.darkTheme;\r\n\t\tif (this.darkTheme) {\r\n\t\t\tdocument.body.classList.add(\"dark-theme\");\r\n\t\t\tlocalStorage.setItem(\"theme\", \"dark\");\r\n\t\t} else {\r\n\t\t\tdocument.body.classList.remove(\"dark-theme\");\r\n\t\t\tlocalStorage.setItem(\"theme\", \"light\");\r\n\t\t}\r\n\t}\r\n\r\n\ttoggleMenu() {\r\n\t\tthis.showMenu = !this.showMenu;\r\n\t}\r\n\r\n\tonMainClick() {\r\n\t\tthis.buttonClick.emit({ button: this.mainButton, index: 0, type: \"main\" });\r\n\t}\r\n\r\n\tonSecondaryClick(btn: TopbarButton, idx: number) {\r\n\t\tthis.buttonClick.emit({ button: btn, index: idx, type: \"secondary\" });\r\n\t}\r\n\r\n\tonSecondaryClickMobile(btn: TopbarButton, idx: number) {\r\n\t\tthis.onSecondaryClick(btn, idx);\r\n\t\tthis.showMenu = false;\r\n\t}\r\n}\r\n",
            "properties": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UserData",
            "id": "interface-UserData-3c5cc536106e1c06b52bdd7f6592799d16aa078237bfaa504146db4a1d674e1ac8100d3e22607753df8b0216f1ebd01fb3ebf7483279e7dd8552838048ab1d01",
            "file": "src/app/auth/auth.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { BehaviorSubject, Observable, tap, firstValueFrom } from \"rxjs\";\r\n\r\nexport interface LoginRequest {\r\n\temail: string;\r\n\tpassword: string;\r\n}\r\n\r\nexport interface RegisterRequest {\r\n\tnombre: string;\r\n\tapellido: string;\r\n\ttelefono: string;\r\n\tusername: string;\r\n\temail: string;\r\n\tpassword: string;\r\n}\r\n\r\nexport interface AuthResponse {\r\n\ttoken: string;\r\n\trefreshToken: string;\r\n\tuserName: string;\r\n\troles: string[];\r\n\tsocio: {\r\n\t\tid: string;\r\n\t\tnumeroSocio: number;\r\n\t\tnombre: string;\r\n\t\tapellido: string;\r\n\t\ttelefono: string;\r\n\t\temail: string;\r\n\t};\r\n}\r\n\r\nexport interface UserData {\r\n\tuserName: string;\r\n\temail: string;\r\n\troles: string[];\r\n\tsocio: {\r\n\t\tid: string;\r\n\t\tnumeroSocio: number;\r\n\t\tnombre: string;\r\n\t\tapellido: string;\r\n\t\ttelefono: string;\r\n\t\temail: string;\r\n\t};\r\n}\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class AuthService {\r\n\tprivate readonly authUrl = \"https://localhost:7259/api/auth\";\r\n\tprivate readonly sociosUrl = \"https://localhost:7259/api/socios\";\r\n\tpublic userLoggedIn = new BehaviorSubject<boolean>(false);\r\n\tpublic userData = new BehaviorSubject<UserData | null>(null);\r\n\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\tlogin(data: LoginRequest): Observable<AuthResponse> {\r\n\t\treturn this.http\r\n\t\t\t.post<AuthResponse>(`${this.sociosUrl}/iniciar-sesion`, data)\r\n\t\t\t.pipe(tap((res) => this.saveTokens(res)));\r\n\t}\r\n\r\n\tregister(data: RegisterRequest): Observable<AuthResponse> {\r\n\t\treturn this.http\r\n\t\t\t.post<AuthResponse>(`${this.sociosUrl}`, data)\r\n\t\t\t.pipe(tap((res) => this.saveTokens(res)));\r\n\t}\r\n\r\n\tprivate saveTokens(res: AuthResponse): void {\r\n\t\tlocalStorage.setItem(\"token\", res.token);\r\n\t\tlocalStorage.setItem(\"refreshToken\", res.refreshToken);\r\n\t}\r\n\r\n\tgetToken(): string | null {\r\n\t\treturn localStorage.getItem(\"token\");\r\n\t}\r\n\r\n\tgetRefreshToken(): string | null {\r\n\t\treturn localStorage.getItem(\"refreshToken\");\r\n\t}\r\n\r\n\tclearSession(): void {\r\n\t\tlocalStorage.removeItem(\"token\");\r\n\t\tlocalStorage.removeItem(\"refreshToken\");\r\n\t\tthis.userLoggedIn.next(false);\r\n\t\tthis.userData.next(null);\r\n\t}\r\n\r\n\tasync loadUserFromToken(): Promise<UserData | null> {\r\n\t\tconst token = this.getToken();\r\n\t\tif (!token) {\r\n\t\t\tthis.userLoggedIn.next(false);\r\n\t\t\tthis.userData.next(null);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tconst user = await firstValueFrom(\r\n\t\t\t\tthis.http.get<UserData>(`${this.sociosUrl}/me`)\r\n\t\t\t);\r\n\t\t\tif (user) {\r\n\t\t\t\tthis.userLoggedIn.next(true);\r\n\t\t\t\tthis.userData.next(user);\r\n\t\t\t\treturn user;\r\n\t\t\t} else {\r\n\t\t\t\tthis.clearSession();\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t} catch {\r\n\t\t\tthis.clearSession();\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "socio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "userName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-7b3c944f060b1b943f3f7d239cb4721e5b76ed6a3d462e3f3cf3d14bfe6d66b8da3597128d38dac3dda804e3e877e7af54577958820de01bbd2db6378fce08ef",
            "file": "src/app/auth/state/auth.effects.ts",
            "properties": [
                {
                    "name": "login$",
                    "defaultValue": "createEffect(() =>\r\n\t\tthis.actions$.pipe(\r\n\t\t\tofType(LoginActions.request),\r\n\t\t\tswitchMap(({ email, password }) =>\r\n\t\t\t\tthis.authService.login({ email, password }).pipe(\r\n\t\t\t\t\tmap((response) => {\r\n\t\t\t\t\t\treturn LoginActions.success({\r\n\t\t\t\t\t\t\ttoken: response.token,\r\n\t\t\t\t\t\t\trefreshToken: response.refreshToken,\r\n\t\t\t\t\t\t\tuserData: {\r\n\t\t\t\t\t\t\t\tuserName: response.userName,\r\n\t\t\t\t\t\t\t\temail: response.socio.email,\r\n\t\t\t\t\t\t\t\troles: response.roles,\r\n\t\t\t\t\t\t\t\tsocio: { ...response.socio },\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tcatchError((error) => of(LoginActions.failure({ error })))\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t)\r\n\t)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "loginSuccess$",
                    "defaultValue": "createEffect(\r\n\t\t() =>\r\n\t\t\tthis.actions$.pipe(\r\n\t\t\t\tofType(LoginActions.success),\r\n\t\t\t\ttap(() => {\r\n\t\t\t\t\tthis.navigationService.navigate(\"/\");\r\n\t\t\t\t})\r\n\t\t\t),\r\n\t\t{ dispatch: false }\r\n\t)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\r\nimport { AuthService } from \"../auth.service\";\r\nimport { LoginActions } from \"./auth.actions\";\r\nimport { catchError, map, of, switchMap, tap } from \"rxjs\";\r\nimport { NavigationService } from \"../../navigation.service\";\r\n\r\n@Injectable()\r\nexport class AuthEffects {\r\n\tpublic login$ = createEffect(() =>\r\n\t\tthis.actions$.pipe(\r\n\t\t\tofType(LoginActions.request),\r\n\t\t\tswitchMap(({ email, password }) =>\r\n\t\t\t\tthis.authService.login({ email, password }).pipe(\r\n\t\t\t\t\tmap((response) => {\r\n\t\t\t\t\t\treturn LoginActions.success({\r\n\t\t\t\t\t\t\ttoken: response.token,\r\n\t\t\t\t\t\t\trefreshToken: response.refreshToken,\r\n\t\t\t\t\t\t\tuserData: {\r\n\t\t\t\t\t\t\t\tuserName: response.userName,\r\n\t\t\t\t\t\t\t\temail: response.socio.email,\r\n\t\t\t\t\t\t\t\troles: response.roles,\r\n\t\t\t\t\t\t\t\tsocio: { ...response.socio },\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tcatchError((error) => of(LoginActions.failure({ error })))\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t)\r\n\t);\r\n\r\n\tpublic loginSuccess$ = createEffect(\r\n\t\t() =>\r\n\t\t\tthis.actions$.pipe(\r\n\t\t\t\tofType(LoginActions.success),\r\n\t\t\t\ttap(() => {\r\n\t\t\t\t\tthis.navigationService.navigate(\"/\");\r\n\t\t\t\t})\r\n\t\t\t),\r\n\t\t{ dispatch: false }\r\n\t);\r\n\r\n\tconstructor(\r\n\t\tprivate actions$: Actions,\r\n\t\tprivate authService: AuthService,\r\n\t\tprivate navigationService: NavigationService\r\n\t) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-3c5cc536106e1c06b52bdd7f6592799d16aa078237bfaa504146db4a1d674e1ac8100d3e22607753df8b0216f1ebd01fb3ebf7483279e7dd8552838048ab1d01",
            "file": "src/app/auth/auth.service.ts",
            "properties": [
                {
                    "name": "authUrl",
                    "defaultValue": "\"https://localhost:7259/api/auth\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "sociosUrl",
                    "defaultValue": "\"https://localhost:7259/api/socios\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "userData",
                    "defaultValue": "new BehaviorSubject<UserData | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "userLoggedIn",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clearSession",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getRefreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadUserFromToken",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<UserData | null>",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "data",
                            "type": "LoginRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<AuthResponse>",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "LoginRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "data",
                            "type": "RegisterRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<AuthResponse>",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "RegisterRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveTokens",
                    "args": [
                        {
                            "name": "res",
                            "type": "AuthResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "res",
                            "type": "AuthResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { BehaviorSubject, Observable, tap, firstValueFrom } from \"rxjs\";\r\n\r\nexport interface LoginRequest {\r\n\temail: string;\r\n\tpassword: string;\r\n}\r\n\r\nexport interface RegisterRequest {\r\n\tnombre: string;\r\n\tapellido: string;\r\n\ttelefono: string;\r\n\tusername: string;\r\n\temail: string;\r\n\tpassword: string;\r\n}\r\n\r\nexport interface AuthResponse {\r\n\ttoken: string;\r\n\trefreshToken: string;\r\n\tuserName: string;\r\n\troles: string[];\r\n\tsocio: {\r\n\t\tid: string;\r\n\t\tnumeroSocio: number;\r\n\t\tnombre: string;\r\n\t\tapellido: string;\r\n\t\ttelefono: string;\r\n\t\temail: string;\r\n\t};\r\n}\r\n\r\nexport interface UserData {\r\n\tuserName: string;\r\n\temail: string;\r\n\troles: string[];\r\n\tsocio: {\r\n\t\tid: string;\r\n\t\tnumeroSocio: number;\r\n\t\tnombre: string;\r\n\t\tapellido: string;\r\n\t\ttelefono: string;\r\n\t\temail: string;\r\n\t};\r\n}\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class AuthService {\r\n\tprivate readonly authUrl = \"https://localhost:7259/api/auth\";\r\n\tprivate readonly sociosUrl = \"https://localhost:7259/api/socios\";\r\n\tpublic userLoggedIn = new BehaviorSubject<boolean>(false);\r\n\tpublic userData = new BehaviorSubject<UserData | null>(null);\r\n\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\tlogin(data: LoginRequest): Observable<AuthResponse> {\r\n\t\treturn this.http\r\n\t\t\t.post<AuthResponse>(`${this.sociosUrl}/iniciar-sesion`, data)\r\n\t\t\t.pipe(tap((res) => this.saveTokens(res)));\r\n\t}\r\n\r\n\tregister(data: RegisterRequest): Observable<AuthResponse> {\r\n\t\treturn this.http\r\n\t\t\t.post<AuthResponse>(`${this.sociosUrl}`, data)\r\n\t\t\t.pipe(tap((res) => this.saveTokens(res)));\r\n\t}\r\n\r\n\tprivate saveTokens(res: AuthResponse): void {\r\n\t\tlocalStorage.setItem(\"token\", res.token);\r\n\t\tlocalStorage.setItem(\"refreshToken\", res.refreshToken);\r\n\t}\r\n\r\n\tgetToken(): string | null {\r\n\t\treturn localStorage.getItem(\"token\");\r\n\t}\r\n\r\n\tgetRefreshToken(): string | null {\r\n\t\treturn localStorage.getItem(\"refreshToken\");\r\n\t}\r\n\r\n\tclearSession(): void {\r\n\t\tlocalStorage.removeItem(\"token\");\r\n\t\tlocalStorage.removeItem(\"refreshToken\");\r\n\t\tthis.userLoggedIn.next(false);\r\n\t\tthis.userData.next(null);\r\n\t}\r\n\r\n\tasync loadUserFromToken(): Promise<UserData | null> {\r\n\t\tconst token = this.getToken();\r\n\t\tif (!token) {\r\n\t\t\tthis.userLoggedIn.next(false);\r\n\t\t\tthis.userData.next(null);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tconst user = await firstValueFrom(\r\n\t\t\t\tthis.http.get<UserData>(`${this.sociosUrl}/me`)\r\n\t\t\t);\r\n\t\t\tif (user) {\r\n\t\t\t\tthis.userLoggedIn.next(true);\r\n\t\t\t\tthis.userData.next(user);\r\n\t\t\t\treturn user;\r\n\t\t\t} else {\r\n\t\t\t\tthis.clearSession();\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t} catch {\r\n\t\t\tthis.clearSession();\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "NavigationService",
            "id": "injectable-NavigationService-bba4f6536152ccaa18b975fa9ce446a270f9ce9ad8aef26135ddc4971d5facca5f484f16ff8fa0b3379d184395c027946dab60199af4cb297cfb7845e2e0b839",
            "file": "src/app/navigation.service.ts",
            "properties": [
                {
                    "name": "currentUrl",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "navigationState$",
                    "defaultValue": "new BehaviorSubject<NavigationState>({\r\n\t\tpreviousUrl: null,\r\n\t\tcurrentUrl: \"\",\r\n\t\tnextUrl: null,\r\n\t\tisSubroute: false,\r\n\t\tisFullRouteChange: false,\r\n\t})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "nextUrl",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "previousUrl",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCurrentUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getNavigationState",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getPreviousUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isSubroute",
                    "args": [
                        {
                            "name": "from",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "to",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "from",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "to",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigate",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport {\r\n\tRouter,\r\n\tNavigationEnd,\r\n\tEvent as NavigationEvent,\r\n} from \"@angular/router\";\r\nimport { filter, pairwise, startWith, map } from \"rxjs/operators\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\n\r\nexport interface NavigationState {\r\n\tpreviousUrl: string | null;\r\n\tcurrentUrl: string;\r\n\tnextUrl: string | null;\r\n\tisSubroute: boolean;\r\n\tisFullRouteChange: boolean;\r\n}\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class NavigationService {\r\n\tprivate previousUrl: string | null = null;\r\n\tprivate currentUrl: string = \"\";\r\n\tprivate nextUrl: string | null = null;\r\n\tprivate navigationState$ = new BehaviorSubject<NavigationState>({\r\n\t\tpreviousUrl: null,\r\n\t\tcurrentUrl: \"\",\r\n\t\tnextUrl: null,\r\n\t\tisSubroute: false,\r\n\t\tisFullRouteChange: false,\r\n\t});\r\n\r\n\tconstructor(private router: Router) {\r\n\t\tthis.router.events\r\n\t\t\t.pipe(\r\n\t\t\t\tfilter(\r\n\t\t\t\t\t(event: NavigationEvent): event is NavigationEnd =>\r\n\t\t\t\t\t\tevent instanceof NavigationEnd\r\n\t\t\t\t),\r\n\t\t\t\tstartWith({ urlAfterRedirects: this.router.url } as NavigationEnd),\r\n\t\t\t\tpairwise()\r\n\t\t\t)\r\n\t\t\t.subscribe(([prev, curr]: [NavigationEnd, NavigationEnd]) => {\r\n\t\t\t\tthis.previousUrl = prev.urlAfterRedirects;\r\n\t\t\t\tthis.currentUrl = curr.urlAfterRedirects;\r\n\t\t\t\tthis.nextUrl = null;\r\n\t\t\t\tconst isSubroute = this.isSubroute(this.previousUrl, this.currentUrl);\r\n\t\t\t\tconst isFullRouteChange = !isSubroute;\r\n\t\t\t\tthis.navigationState$.next({\r\n\t\t\t\t\tpreviousUrl: this.previousUrl,\r\n\t\t\t\t\tcurrentUrl: this.currentUrl,\r\n\t\t\t\t\tnextUrl: null,\r\n\t\t\t\t\tisSubroute,\r\n\t\t\t\t\tisFullRouteChange,\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t}\r\n\r\n\tpublic getNavigationState() {\r\n\t\treturn this.navigationState$.asObservable();\r\n\t}\r\n\r\n\tpublic getCurrentUrl(): string {\r\n\t\treturn this.currentUrl;\r\n\t}\r\n\r\n\tpublic getPreviousUrl(): string | null {\r\n\t\treturn this.previousUrl;\r\n\t}\r\n\r\n\tpublic navigate(url: string): void {\r\n\t\tthis.nextUrl = url;\r\n\t\tconst isSubroute = this.isSubroute(this.currentUrl, url);\r\n\t\tconst isFullRouteChange = !isSubroute;\r\n\t\tthis.navigationState$.next({\r\n\t\t\tpreviousUrl: this.currentUrl,\r\n\t\t\tcurrentUrl: url,\r\n\t\t\tnextUrl: url,\r\n\t\t\tisSubroute,\r\n\t\t\tisFullRouteChange,\r\n\t\t});\r\n\t\tthis.router.navigateByUrl(url);\r\n\t}\r\n\r\n\tprivate isSubroute(from: string | null, to: string): boolean {\r\n\t\tif (!from) return false;\r\n\t\t// Considera subruta si el inicio de la ruta es igual y solo cambia el segmento final\r\n\t\tconst fromSegments = from.split(\"/\").filter(Boolean);\r\n\t\tconst toSegments = to.split(\"/\").filter(Boolean);\r\n\t\tif (fromSegments.length === 0 || toSegments.length === 0) return false;\r\n\t\tif (fromSegments[0] !== toSegments[0]) return false;\r\n\t\t// Si solo cambia el último segmento o se agrega uno, es subruta\r\n\t\tif (\r\n\t\t\ttoSegments.length > fromSegments.length &&\r\n\t\t\ttoSegments.slice(0, fromSegments.length).join(\"/\") ===\r\n\t\t\t\tfromSegments.join(\"/\")\r\n\t\t) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (\r\n\t\t\tfromSegments.length > toSegments.length &&\r\n\t\t\tfromSegments.slice(0, toSegments.length).join(\"/\") ===\r\n\t\t\t\ttoSegments.join(\"/\")\r\n\t\t) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SpinnerService",
            "id": "injectable-SpinnerService-278f80e51ec158195b8315e7ea6bc4d7a1c3ec95fa530620d97ac09432d439d69435a2dcec7206fe99efd5826d66c89dbd702ae3aa0d01639a36ee4681646a9e",
            "file": "src/app/spinner.service.ts",
            "properties": [
                {
                    "name": "_loading",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_pendingRequests",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loading$",
                    "defaultValue": "this._loading.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport {\r\n\tNavigationCancel,\r\n\tNavigationEnd,\r\n\tNavigationError,\r\n\tNavigationStart,\r\n\tRouter,\r\n} from \"@angular/router\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class SpinnerService {\r\n\tprivate _loading = new BehaviorSubject<boolean>(false);\r\n\tpublic readonly loading$ = this._loading.asObservable();\r\n\tprivate _pendingRequests = 0;\r\n\r\n\tconstructor(router: Router) {\r\n\t\trouter.events.subscribe((event) => {\r\n\t\t\tif (event instanceof NavigationStart) {\r\n\t\t\t\tthis.show();\r\n\t\t\t} else if (\r\n\t\t\t\tevent instanceof NavigationEnd ||\r\n\t\t\t\tevent instanceof NavigationCancel ||\r\n\t\t\t\tevent instanceof NavigationError\r\n\t\t\t) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tshow(): void {\r\n\t\tthis._pendingRequests++;\r\n\t\tthis._loading.next(true);\r\n\t}\r\n\r\n\thide(): void {\r\n\t\tif (this._pendingRequests > 0) {\r\n\t\t\tthis._pendingRequests--;\r\n\t\t}\r\n\t\tif (this._pendingRequests === 0) {\r\n\t\t\tthis._loading.next(false);\r\n\t\t}\r\n\t}\r\n\r\n\treset(): void {\r\n\t\tthis._pendingRequests = 0;\r\n\t\tthis._loading.next(false);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AdminCanchasComponent",
            "id": "component-AdminCanchasComponent-a6a549601289bdab460547bddf23a67618642e321dacbf0251621d3da3f250b67ebe8c281b3303c6d7c26a2eb8c636db6c3d26158e4f9511583e44f83bc876fa",
            "file": "src/app/perfil/admin-canchas.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-canchas",
            "styleUrls": [],
            "styles": [
                "\n\t\t\t.admin-canchas-placeholder {\n\t\t\t\tpadding: 2rem;\n\t\t\t\tbackground: var(--color-bg-alt, #f5f5f5);\n\t\t\t\tborder-radius: 1rem;\n\t\t\t\ttext-align: center;\n\t\t\t\tmargin-top: 2rem;\n\t\t\t}\n\t\t"
            ],
            "template": "<div class=\"admin-canchas-placeholder\">\n\t<h3>Administración de Canchas</h3>\n\t<p>Sección en construcción...</p>\n</div>\n\t",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n\tselector: \"app-admin-canchas\",\r\n\tstandalone: true,\r\n\ttemplate: `\r\n\t\t<div class=\"admin-canchas-placeholder\">\r\n\t\t\t<h3>Administración de Canchas</h3>\r\n\t\t\t<p>Sección en construcción...</p>\r\n\t\t</div>\r\n\t`,\r\n\tstyles: [\r\n\t\t`\r\n\t\t\t.admin-canchas-placeholder {\r\n\t\t\t\tpadding: 2rem;\r\n\t\t\t\tbackground: var(--color-bg-alt, #f5f5f5);\r\n\t\t\t\tborder-radius: 1rem;\r\n\t\t\t\ttext-align: center;\r\n\t\t\t\tmargin-top: 2rem;\r\n\t\t\t}\r\n\t\t`,\r\n\t],\r\n})\r\nexport class AdminCanchasComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n\t\t\t.admin-canchas-placeholder {\n\t\t\t\tpadding: 2rem;\n\t\t\t\tbackground: var(--color-bg-alt, #f5f5f5);\n\t\t\t\tborder-radius: 1rem;\n\t\t\t\ttext-align: center;\n\t\t\t\tmargin-top: 2rem;\n\t\t\t}\n\t\t\n",
            "extends": []
        },
        {
            "name": "AppButtonComponent",
            "id": "component-AppButtonComponent-08989967bd23162bc73f0986c4541ee25a0bb971b81c7ee008cec9ef77088f1ee2ee53f72b416530623315f5daa5dea65012281b57d12989b278ad65078ea76a",
            "file": "src/app/components/buttons/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "template": "<button\n\t[type]=\"button.type || 'button'\"\n\t[disabled]=\"button.disabled || button.loading\"\n\t[ngClass]=\"[\n\t\tbutton.color || 'neutral',\n\t\tbutton.icon ? 'has-icon' : '',\n\t\tbutton.loading ? 'loading' : ''\n\t]\"\n\t(click)=\"onClick()\"\n>\n\t<span\n\t\t*ngIf=\"button.icon\"\n\t\tclass=\"icon\"\n\t\t[class]=\"button.icon\"\n\t></span>\n\t<span class=\"btn-label\">{{ button.label }}</span>\n\t<span\n\t\t*ngIf=\"button.loading\"\n\t\tclass=\"spinner\"\n\t></span>\n</button>\n\t",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "TopbarButton",
                    "decorators": []
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter<TopbarButtonClickEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport {\r\n\tTopbarButton,\r\n\tTopbarButtonClickEvent,\r\n} from \"../buttons/button.interfaces\";\r\n\r\n@Component({\r\n\tselector: \"app-button\",\r\n\tstandalone: true,\r\n\timports: [CommonModule],\r\n\ttemplate: `\r\n\t\t<button\r\n\t\t\t[type]=\"button.type || 'button'\"\r\n\t\t\t[disabled]=\"button.disabled || button.loading\"\r\n\t\t\t[ngClass]=\"[\r\n\t\t\t\tbutton.color || 'neutral',\r\n\t\t\t\tbutton.icon ? 'has-icon' : '',\r\n\t\t\t\tbutton.loading ? 'loading' : ''\r\n\t\t\t]\"\r\n\t\t\t(click)=\"onClick()\"\r\n\t\t>\r\n\t\t\t<span\r\n\t\t\t\t*ngIf=\"button.icon\"\r\n\t\t\t\tclass=\"icon\"\r\n\t\t\t\t[class]=\"button.icon\"\r\n\t\t\t></span>\r\n\t\t\t<span class=\"btn-label\">{{ button.label }}</span>\r\n\t\t\t<span\r\n\t\t\t\t*ngIf=\"button.loading\"\r\n\t\t\t\tclass=\"spinner\"\r\n\t\t\t></span>\r\n\t\t</button>\r\n\t`,\r\n\tstyleUrls: [\"./button.component.scss\"],\r\n})\r\nexport class AppButtonComponent {\r\n\t@Input() button!: TopbarButton;\r\n\t@Input() index?: number;\r\n\t@Output() buttonClick = new EventEmitter<TopbarButtonClickEvent>();\r\n\r\n\tonClick() {\r\n\t\tif (!this.button.disabled && !this.button.loading) {\r\n\t\t\tthis.buttonClick.emit({ button: this.button, index: this.index });\r\n\t\t}\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".neutral {\r\n\tbackground: var(--btn-bg, #f5f5f5);\r\n\tcolor: var(--btn-color, #222);\r\n\tborder: 1px solid var(--btn-border, #ccc);\r\n}\r\n.primary {\r\n\tbackground: var(--btn-primary-bg, #1976d2);\r\n\tcolor: var(--btn-primary-color, #fff);\r\n\tborder: none;\r\n}\r\n.accent {\r\n\tbackground: var(--btn-accent-bg, #ff4081);\r\n\tcolor: var(--btn-accent-color, #fff);\r\n\tborder: none;\r\n}\r\n.warn {\r\n\tbackground: var(--btn-warn-bg, #f44336);\r\n\tcolor: var(--btn-warn-color, #fff);\r\n\tborder: none;\r\n}\r\nbutton {\r\n\tdisplay: inline-flex;\r\n\talign-items: center;\r\n\tgap: 0.5em;\r\n\tpadding: 0.5em 1.2em;\r\n\tborder-radius: 4px;\r\n\tfont-size: 1em;\r\n\tcursor: pointer;\r\n\ttransition: background 0.2s, color 0.2s, border 0.2s;\r\n\tbackground: var(--btn-bg, #f5f5f5);\r\n\tcolor: var(--btn-color, #222);\r\n\tborder: 1px solid var(--btn-border, #ccc);\r\n\tfont-family: inherit;\r\n\tfont-weight: 500;\r\n\tbox-shadow: 0 1px 2px rgba(0, 0, 0, 0.03);\r\n}\r\nbutton:disabled {\r\n\topacity: 0.6;\r\n\tcursor: not-allowed;\r\n}\r\n.icon {\r\n\tfont-size: 1.1em;\r\n}\r\n.has-icon .btn-label {\r\n\tmargin-left: 0.3em;\r\n}\r\n.loading .btn-label {\r\n\topacity: 0.5;\r\n}\r\n.spinner {\r\n\twidth: 1em;\r\n\theight: 1em;\r\n\tborder: 2px solid #fff;\r\n\tborder-top: 2px solid #1976d2;\r\n\tborder-radius: 50%;\r\n\tdisplay: inline-block;\r\n\tanimation: spin 0.8s linear infinite;\r\n\tmargin-left: 0.5em;\r\n}\r\n@keyframes spin {\r\n\t0% {\r\n\t\ttransform: rotate(0deg);\r\n\t}\r\n\t100% {\r\n\t\ttransform: rotate(360deg);\r\n\t}\r\n}\r\nbody.dark-theme {\r\n\t--btn-bg: #222;\r\n\t--btn-color: #f5f5f5;\r\n\t--btn-border: #444;\r\n}\r\nbody:not(.dark-theme) {\r\n\t--btn-bg: #f5f5f5;\r\n\t--btn-color: #222;\r\n\t--btn-border: #ccc;\r\n}\r\nbody.dark-theme .primary {\r\n\t--btn-primary-bg: #2196f3;\r\n\t--btn-primary-color: #fff;\r\n}\r\nbody:not(.dark-theme) .primary {\r\n\t--btn-primary-bg: #1976d2;\r\n\t--btn-primary-color: #fff;\r\n}\r\nbody.dark-theme .accent {\r\n\t--btn-accent-bg: #f06292;\r\n\t--btn-accent-color: #fff;\r\n}\r\nbody:not(.dark-theme) .accent {\r\n\t--btn-accent-bg: #ff4081;\r\n\t--btn-accent-color: #fff;\r\n}\r\nbody.dark-theme .warn {\r\n\t--btn-warn-bg: #e57373;\r\n\t--btn-warn-color: #fff;\r\n}\r\nbody:not(.dark-theme) .warn {\r\n\t--btn-warn-bg: #f44336;\r\n\t--btn-warn-color: #fff;\r\n}\r\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-67ccef97aeeacd0dec2252ca58b12577a34c991b03bec3955d372c6fa3024e4e6530bcdeff05106b2f84d6ddaf5c6e85fde32b42f9e43e76a904647cb621fa2a",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "mainButton",
                    "defaultValue": "{\r\n\t\tid: TOPBAR_BUTTONS_IDS.homeButton,\r\n\t\tlabel: \"Inicio\",\r\n\t\ticon: \"fa fa-home\",\r\n\t}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TopbarButton",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "secondaryButtons",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TopbarButton[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "title",
                    "defaultValue": "\"My Awesome Project\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "onTopbarButton",
                    "args": [
                        {
                            "name": "event",
                            "type": "TopbarButtonClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "TopbarButtonClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSecondaryButtons",
                    "args": [
                        {
                            "name": "isLoggedIn",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "isLoggedIn",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ShellComponent",
                    "type": "component"
                },
                {
                    "name": "SpinnerComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\r\nimport { ShellComponent } from \"./shell/shell.component\";\r\nimport { TopbarButton } from \"./topbar/topbar.component\";\r\nimport type { TopbarButtonClickEvent } from \"./shell/shell.component\";\r\nimport { AuthService } from \"./auth/auth.service\";\r\nimport { TOPBAR_BUTTONS_IDS } from \"./topbar/topbar-buttons-ids\";\r\nimport { NavigationService } from \"./navigation.service\";\r\nimport { SpinnerComponent } from \"./spinner/spinner.component\";\r\n\r\n@Component({\r\n\tselector: \"app-root\",\r\n\tstandalone: true,\r\n\timports: [ShellComponent, SpinnerComponent],\r\n\ttemplateUrl: \"./app.component.html\",\r\n\tstyleUrl: \"./app.component.scss\",\r\n})\r\nexport class AppComponent implements OnInit {\r\n\ttitle = \"My Awesome Project\";\r\n\tmainButton: TopbarButton = {\r\n\t\tid: TOPBAR_BUTTONS_IDS.homeButton,\r\n\t\tlabel: \"Inicio\",\r\n\t\ticon: \"fa fa-home\",\r\n\t};\r\n\tsecondaryButtons: TopbarButton[] = [];\r\n\r\n\tconstructor(\r\n\t\tprivate readonly authService: AuthService,\r\n\t\tprivate readonly navigationService: NavigationService\r\n\t) {}\r\n\r\n\tpublic ngOnInit(): void {\r\n\t\tthis.authService.userLoggedIn.subscribe((isLoggedIn) =>\r\n\t\t\tthis.updateSecondaryButtons(isLoggedIn)\r\n\t\t);\r\n\t}\r\n\r\n\tonTopbarButton(event: TopbarButtonClickEvent): void {\r\n\t\tconst isLoggedIn = this.authService.userLoggedIn.getValue();\r\n\t\tswitch (event.button.id) {\r\n\t\t\tcase TOPBAR_BUTTONS_IDS.loginButton:\r\n\t\t\t\tthis.navigationService.navigate(\"/login\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase TOPBAR_BUTTONS_IDS.registerButton:\r\n\t\t\t\tthis.navigationService.navigate(\"/register\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase TOPBAR_BUTTONS_IDS.profileButton:\r\n\t\t\t\tif (isLoggedIn) {\r\n\t\t\t\t\tthis.navigationService.navigate(\"/perfil\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.navigationService.navigate(\"/login\");\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase TOPBAR_BUTTONS_IDS.logoutButton:\r\n\t\t\t\tthis.authService.clearSession();\r\n\t\t\t\tthis.navigationService.navigate(\"/login\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase TOPBAR_BUTTONS_IDS.homeButton:\r\n\t\t\t\tthis.navigationService.navigate(\"/\");\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate updateSecondaryButtons(isLoggedIn: boolean): void {\r\n\t\tthis.secondaryButtons = [];\r\n\t\tisLoggedIn\r\n\t\t\t? this.secondaryButtons.push(\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid: TOPBAR_BUTTONS_IDS.profileButton,\r\n\t\t\t\t\t\tlabel: \"Perfil\",\r\n\t\t\t\t\t\ticon: \"fa fa-user\",\r\n\t\t\t\t\t\tdisabled: false,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid: TOPBAR_BUTTONS_IDS.logoutButton,\r\n\t\t\t\t\t\tlabel: \"Cerrar sesión\",\r\n\t\t\t\t\t\ticon: \"fa fa-sign-out\",\r\n\t\t\t\t\t\tdisabled: false,\r\n\t\t\t\t\t}\r\n\t\t\t  )\r\n\t\t\t: this.secondaryButtons.push(\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid: TOPBAR_BUTTONS_IDS.loginButton,\r\n\t\t\t\t\t\tlabel: \"Iniciar sesión\",\r\n\t\t\t\t\t\ticon: \"fa fa-sign-in\",\r\n\t\t\t\t\t\tdisabled: false,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid: TOPBAR_BUTTONS_IDS.registerButton,\r\n\t\t\t\t\t\tlabel: \"Registrarse\",\r\n\t\t\t\t\t\ticon: \"fa fa-user-plus\",\r\n\t\t\t\t\t\tdisabled: false,\r\n\t\t\t\t\t}\r\n\t\t\t  );\r\n\t}\r\n}\r\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-spinner></app-spinner>\r\n<app-shell\r\n\t[title]=\"this.title\"\r\n\t[mainButton]=\"this.mainButton\"\r\n\t[secondaryButtons]=\"this.secondaryButtons\"\r\n\t(topbarButtonClick)=\"onTopbarButton($event)\"\r\n>\r\n</app-shell>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #555ab9;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-48b9abe37706bc42f20cfa97ed9f943678344ea7d254c0c82183c657750c2191b43486fe730c778627b2ea6aa0e2f33a7abcf3ce08b68ad18b062ad99ea97acb",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-0f27bb6e7791795b257d40d32564580968627f76baa927f52482da6b6b773cfc344001945d31adec8cb7fb0476698869ba2a47fea2816a34b804b2707eb3fd59",
            "file": "src/app/auth/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "email",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "password",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { RouterLink } from \"@angular/router\";\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { NavigationService } from \"../../navigation.service\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { LoginActions } from \"../state/auth.actions\";\r\n\r\n@Component({\r\n\tselector: \"app-login\",\r\n\tstandalone: true,\r\n\timports: [CommonModule, RouterLink, FormsModule],\r\n\ttemplateUrl: \"./login.component.html\",\r\n\tstyleUrl: \"./login.component.scss\",\r\n})\r\nexport class LoginComponent {\r\n\temail = \"\";\r\n\tpassword = \"\";\r\n\r\n\tconstructor(private store: Store, private navService: NavigationService) {}\r\n\r\n\tonSubmit() {\r\n\t\tthis.store.dispatch(\r\n\t\t\tLoginActions.request({\r\n\t\t\t\temail: this.email,\r\n\t\t\t\tpassword: this.password,\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n}\r\n",
            "styleUrl": "./login.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "navService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<form\r\n\tclass=\"login-form\"\r\n\t(ngSubmit)=\"onSubmit()\"\r\n\t#loginForm=\"ngForm\"\r\n>\r\n\t<h2>Iniciar sesión</h2>\r\n\t<label\r\n\t\t>Email\r\n\t\t<input\r\n\t\t\ttype=\"email\"\r\n\t\t\tname=\"email\"\r\n\t\t\t[(ngModel)]=\"email\"\r\n\t\t\trequired\r\n\t\t\tautocomplete=\"username\"\r\n\t\t/>\r\n\t</label>\r\n\t<label\r\n\t\t>Contraseña\r\n\t\t<input\r\n\t\t\ttype=\"password\"\r\n\t\t\tname=\"password\"\r\n\t\t\t[(ngModel)]=\"password\"\r\n\t\t\trequired\r\n\t\t\tautocomplete=\"current-password\"\r\n\t\t/>\r\n\t</label>\r\n\t<button\r\n\t\ttype=\"submit\"\r\n\t\t[disabled]=\"!loginForm.form.valid\"\r\n\t>\r\n\t\tEntrar\r\n\t</button>\r\n\t<div class=\"register-link\">\r\n\t\t¿No tienes cuenta? <a routerLink=\"/register\">Crear cuenta</a>\r\n\t</div>\r\n</form>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: inherit;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #357a14;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PerfilComponent",
            "id": "component-PerfilComponent-e227560e45eb7a03b658e3ad008889f21c997399a64e5a48fd620ab8e0a17a22c60b67d07bc490e113229380163f9eab723f06f7c51fe3941295d96cebd1baa1",
            "file": "src/app/perfil/perfil.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-perfil",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./perfil.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeSection",
                    "defaultValue": "\"perfil\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"perfil\" | \"canchas\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "form",
                    "defaultValue": "{\r\n\t\tuserName: \"\",\r\n\t\temail: \"\",\r\n\t\troles: [],\r\n\t\tsocio: {\r\n\t\t\tid: \"\",\r\n\t\t\tnumeroSocio: 0,\r\n\t\t\tnombre: \"\",\r\n\t\t\tapellido: \"\",\r\n\t\t\ttelefono: \"\",\r\n\t\t\temail: \"\",\r\n\t\t},\r\n\t}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserData",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isEditSocio",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "isEditUser",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "socioFormBackup",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<> | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "userFormBackup",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<UserData> | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "onCancelEditSocio",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCancelEditUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEditSocio",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEditUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSaveSocio",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSaveUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "AdminCanchasComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { AuthService, UserData } from \"../auth/auth.service\";\r\nimport { filter, Subject, takeUntil } from \"rxjs\";\r\nimport { AdminCanchasComponent } from \"./admin-canchas.component\";\r\n\r\n@Component({\r\n\tselector: \"app-perfil\",\r\n\tstandalone: true,\r\n\timports: [CommonModule, FormsModule, AdminCanchasComponent],\r\n\ttemplateUrl: \"./perfil.component.html\",\r\n\tstyleUrl: \"./perfil.component.scss\",\r\n})\r\nexport class PerfilComponent implements OnInit, OnDestroy {\r\n\tprivate destroy$ = new Subject<void>();\r\n\r\n\tform: UserData = {\r\n\t\tuserName: \"\",\r\n\t\temail: \"\",\r\n\t\troles: [],\r\n\t\tsocio: {\r\n\t\t\tid: \"\",\r\n\t\t\tnumeroSocio: 0,\r\n\t\t\tnombre: \"\",\r\n\t\t\tapellido: \"\",\r\n\t\t\ttelefono: \"\",\r\n\t\t\temail: \"\",\r\n\t\t},\r\n\t};\r\n\r\n\tactiveSection: \"perfil\" | \"canchas\" = \"perfil\";\r\n\r\n\t// Estados de edición\r\n\tisEditUser = false;\r\n\tisEditSocio = false;\r\n\tuserFormBackup: Partial<UserData> | null = null;\r\n\tsocioFormBackup: Partial<UserData[\"socio\"]> | null = null;\r\n\r\n\tconstructor(private authService: AuthService) {}\r\n\r\n\tpublic ngOnInit() {\r\n\t\tthis.authService.userData\r\n\t\t\t.pipe(\r\n\t\t\t\ttakeUntil(this.destroy$),\r\n\t\t\t\tfilter((x): x is UserData => !!x)\r\n\t\t\t)\r\n\t\t\t.subscribe((userData) => {\r\n\t\t\t\tthis.form = { ...userData };\r\n\t\t\t});\r\n\t}\r\n\r\n\tpublic ngOnDestroy(): void {\r\n\t\tthis.destroy$.next();\r\n\t\tthis.destroy$.complete();\r\n\t}\r\n\r\n\t// Edición datos usuario\r\n\tonEditUser() {\r\n\t\tthis.isEditUser = true;\r\n\t\tthis.userFormBackup = {\r\n\t\t\tuserName: this.form.userName,\r\n\t\t\temail: this.form.socio.email,\r\n\t\t};\r\n\t}\r\n\r\n\tonCancelEditUser() {\r\n\t\tif (this.userFormBackup) {\r\n\t\t\tthis.form.userName = this.userFormBackup.userName || \"\";\r\n\t\t\tthis.form.socio.email = this.userFormBackup.email || \"\";\r\n\t\t}\r\n\t\tthis.isEditUser = false;\r\n\t}\r\n\r\n\tonSaveUser() {\r\n\t\t// Aquí iría la lógica para guardar los datos editados del usuario\r\n\t\tthis.isEditUser = false;\r\n\t}\r\n\r\n\t// Edición datos socio\r\n\tonEditSocio() {\r\n\t\tthis.isEditSocio = true;\r\n\t\tthis.socioFormBackup = { ...this.form.socio };\r\n\t}\r\n\r\n\tonCancelEditSocio() {\r\n\t\tif (this.socioFormBackup) {\r\n\t\t\tthis.form.socio = {\r\n\t\t\t\tid: this.socioFormBackup.id ?? \"\",\r\n\t\t\t\tnumeroSocio: this.socioFormBackup.numeroSocio ?? 0,\r\n\t\t\t\tnombre: this.socioFormBackup.nombre ?? \"\",\r\n\t\t\t\tapellido: this.socioFormBackup.apellido ?? \"\",\r\n\t\t\t\ttelefono: this.socioFormBackup.telefono ?? \"\",\r\n\t\t\t\temail: this.socioFormBackup.email ?? \"\",\r\n\t\t\t};\r\n\t\t}\r\n\t\tthis.isEditSocio = false;\r\n\t}\r\n\r\n\tonSaveSocio() {\r\n\t\t// Aquí iría la lógica para guardar los datos editados del socio\r\n\t\tthis.isEditSocio = false;\r\n\t}\r\n\r\n\tonSubmit() {\r\n\t\t// Aquí iría la lógica para actualizar los datos del usuario\r\n\t\talert(\"Datos actualizados (simulado): \" + JSON.stringify(this.form));\r\n\t}\r\n}\r\n",
            "styleUrl": "./perfil.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"perfil-panel\">\r\n\t<nav class=\"perfil-sidebar\">\r\n\t\t<h3>Panel de usuario</h3>\r\n\t\t<button\r\n\t\t\t[class.active]=\"activeSection === 'perfil'\"\r\n\t\t\t(click)=\"activeSection = 'perfil'\"\r\n\t\t>\r\n\t\t\tPerfil\r\n\t\t</button>\r\n\t\t<button\r\n\t\t\t*ngIf=\"form.roles.includes('Admin')\"\r\n\t\t\t[class.active]=\"activeSection === 'canchas'\"\r\n\t\t\t(click)=\"activeSection = 'canchas'\"\r\n\t\t>\r\n\t\t\tCanchas\r\n\t\t</button>\r\n\t</nav>\r\n\t<section class=\"perfil-content\">\r\n\t\t<ng-container [ngSwitch]=\"activeSection\">\r\n\t\t\t<form\r\n\t\t\t\t*ngSwitchCase=\"'perfil'\"\r\n\t\t\t\t(ngSubmit)=\"onSubmit()\"\r\n\t\t\t\t#perfilForm=\"ngForm\"\r\n\t\t\t>\r\n\t\t\t\t<h2>Perfil</h2>\r\n\t\t\t\t<fieldset class=\"user-section\">\r\n\t\t\t\t\t<legend>Datos de usuario</legend>\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\tNombre de usuario\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tname=\"userName\"\r\n\t\t\t\t\t\t\t[(ngModel)]=\"form.userName\"\r\n\t\t\t\t\t\t\t[readonly]=\"!isEditUser\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\tEmail\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype=\"email\"\r\n\t\t\t\t\t\t\tname=\"email\"\r\n\t\t\t\t\t\t\t[(ngModel)]=\"form.socio.email\"\r\n\t\t\t\t\t\t\t[readonly]=\"!isEditUser\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\tRoles\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tname=\"roles\"\r\n\t\t\t\t\t\t\t[value]=\"form.roles.length > 0 ? form.roles.join(', ') : '-'\"\r\n\t\t\t\t\t\t\treadonly\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<div class=\"edit-actions\">\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t*ngIf=\"!isEditUser\"\r\n\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t(click)=\"onEditUser()\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tEditar\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<span *ngIf=\"isEditUser\">\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t\t(click)=\"onCancelEditUser()\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tCancelar\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t\t(click)=\"onSaveUser()\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tGuardar\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</fieldset>\r\n\t\t\t\t<fieldset class=\"socio-section\">\r\n\t\t\t\t\t<legend>Datos de socio</legend>\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\tNombre\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tname=\"socioNombre\"\r\n\t\t\t\t\t\t\t[(ngModel)]=\"form.socio.nombre\"\r\n\t\t\t\t\t\t\t[readonly]=\"!isEditSocio\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\tApellido\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tname=\"socioApellido\"\r\n\t\t\t\t\t\t\t[(ngModel)]=\"form.socio.apellido\"\r\n\t\t\t\t\t\t\t[readonly]=\"!isEditSocio\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\tTeléfono\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype=\"tel\"\r\n\t\t\t\t\t\t\tname=\"socioTelefono\"\r\n\t\t\t\t\t\t\t[(ngModel)]=\"form.socio.telefono\"\r\n\t\t\t\t\t\t\t[readonly]=\"!isEditSocio\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\tNúmero de socio\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tname=\"numeroSocio\"\r\n\t\t\t\t\t\t\t[(ngModel)]=\"form.socio.numeroSocio\"\r\n\t\t\t\t\t\t\treadonly\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<div class=\"edit-actions\">\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t*ngIf=\"!isEditSocio\"\r\n\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t(click)=\"onEditSocio()\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tEditar\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<span *ngIf=\"isEditSocio\">\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t\t(click)=\"onCancelEditSocio()\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tCancelar\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t\t(click)=\"onSaveSocio()\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tGuardar\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</fieldset>\r\n\t\t\t</form>\r\n\t\t\t<app-admin-canchas *ngSwitchCase=\"'canchas'\"></app-admin-canchas>\r\n\t\t</ng-container>\r\n\t</section>\r\n</div>\r\n"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-48c2fdff04e29343254950137fe8c557ff8cd1d55d8de216f40e3140724b6745f8ed26d3385c0b5bb24eac2385ded2b2c31996589db1bb8c4e10cbe9ef7644c9",
            "file": "src/app/auth/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apellido",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "email",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "errorMsg",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "nombre",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "password",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "showError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "showSuccess",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "telefono",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "username",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { RouterLink } from \"@angular/router\";\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { AuthService, RegisterRequest } from \"../auth.service\";\r\nimport { Subject, takeUntil } from \"rxjs\";\r\nimport { NavigationService } from \"../../navigation.service\";\r\n\r\n@Component({\r\n\tselector: \"app-register\",\r\n\ttemplateUrl: \"./register.component.html\",\r\n\tstyleUrl: \"./register.component.scss\",\r\n\tstandalone: true,\r\n\timports: [CommonModule, RouterLink, FormsModule],\r\n})\r\nexport class RegisterComponent implements OnDestroy {\r\n\tprivate destroy$ = new Subject<void>();\r\n\t// Datos de usuario\r\n\tusername = \"\";\r\n\temail = \"\";\r\n\tpassword = \"\";\r\n\r\n\t// Datos del socio\r\n\tnombre = \"\";\r\n\tapellido = \"\";\r\n\ttelefono = \"\";\r\n\r\n\tshowSuccess = false;\r\n\tshowError = false;\r\n\terrorMsg = \"\";\r\n\r\n\tconstructor(\r\n\t\tprivate readonly authService: AuthService,\r\n\t\tprivate readonly navService: NavigationService\r\n\t) {}\r\n\r\n\tpublic ngOnDestroy(): void {\r\n\t\tthis.destroy$.next();\r\n\t\tthis.destroy$.complete();\r\n\t}\r\n\r\n\tonSubmit() {\r\n\t\tconst registerRequest: RegisterRequest = {\r\n\t\t\tnombre: this.nombre,\r\n\t\t\tapellido: this.apellido,\r\n\t\t\ttelefono: this.telefono,\r\n\t\t\tusername: this.username,\r\n\t\t\temail: this.email,\r\n\t\t\tpassword: this.password,\r\n\t\t};\r\n\r\n\t\tthis.authService\r\n\t\t\t.register(registerRequest)\r\n\t\t\t.pipe(takeUntil(this.destroy$))\r\n\t\t\t.subscribe({\r\n\t\t\t\tnext: () => {\r\n\t\t\t\t\tthis.showError = false;\r\n\t\t\t\t\tthis.showSuccess = true;\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\tthis.showSuccess = false;\r\n\t\t\t\t\t\tthis.navService.navigate(\"/login\");\r\n\t\t\t\t\t}, 1500);\r\n\t\t\t\t},\r\n\t\t\t\terror: (error) => {\r\n\t\t\t\t\tthis.showSuccess = false;\r\n\t\t\t\t\tthis.showError = true;\r\n\t\t\t\t\tthis.errorMsg =\r\n\t\t\t\t\t\terror?.error?.message || error.message || \"Error desconocido\";\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\tthis.showError = false;\r\n\t\t\t\t\t}, 2500);\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t}\r\n}\r\n",
            "styleUrl": "./register.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "navService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<div\r\n\t*ngIf=\"showSuccess\"\r\n\tclass=\"toast-success\"\r\n>\r\n\t¡Registro exitoso! Redirigiendo al login...\r\n</div>\r\n<div\r\n\t*ngIf=\"showError\"\r\n\tclass=\"toast-error\"\r\n>\r\n\t{{ errorMsg }}\r\n</div>\r\n<form\r\n\tclass=\"register-form\"\r\n\t(ngSubmit)=\"onSubmit()\"\r\n\t#registerForm=\"ngForm\"\r\n>\r\n\t<h2>Crear cuenta</h2>\r\n\r\n\t<!-- Sección: Datos de usuario -->\r\n\t<fieldset class=\"user-section\">\r\n\t\t<legend>Datos de usuario</legend>\r\n\t\t<label>\r\n\t\t\tNombre de Usuario\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tname=\"username\"\r\n\t\t\t\t[(ngModel)]=\"username\"\r\n\t\t\t\trequired\r\n\t\t\t/>\r\n\t\t</label>\r\n\t\t<label>\r\n\t\t\tEmail\r\n\t\t\t<input\r\n\t\t\t\ttype=\"email\"\r\n\t\t\t\tname=\"email\"\r\n\t\t\t\t[(ngModel)]=\"email\"\r\n\t\t\t\trequired\r\n\t\t\t/>\r\n\t\t</label>\r\n\t\t<label>\r\n\t\t\tContraseña\r\n\t\t\t<input\r\n\t\t\t\ttype=\"password\"\r\n\t\t\t\tname=\"password\"\r\n\t\t\t\t[(ngModel)]=\"password\"\r\n\t\t\t\trequired\r\n\t\t\t/>\r\n\t\t</label>\r\n\t</fieldset>\r\n\r\n\t<!-- Sección: Datos del socio -->\r\n\t<fieldset class=\"socio-section\">\r\n\t\t<legend>Datos del socio</legend>\r\n\t\t<label>\r\n\t\t\tNombre\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tname=\"nombre\"\r\n\t\t\t\t[(ngModel)]=\"nombre\"\r\n\t\t\t\trequired\r\n\t\t\t/>\r\n\t\t</label>\r\n\t\t<label>\r\n\t\t\tApellido\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tname=\"apellido\"\r\n\t\t\t\t[(ngModel)]=\"apellido\"\r\n\t\t\t\trequired\r\n\t\t\t/>\r\n\t\t</label>\r\n\t\t<label>\r\n\t\t\tTeléfono\r\n\t\t\t<input\r\n\t\t\t\ttype=\"tel\"\r\n\t\t\t\tname=\"telefono\"\r\n\t\t\t\t[(ngModel)]=\"telefono\"\r\n\t\t\t\trequired\r\n\t\t\t/>\r\n\t\t</label>\r\n\t</fieldset>\r\n\r\n\t<button\r\n\t\ttype=\"submit\"\r\n\t\t[disabled]=\"!registerForm.form.valid\"\r\n\t>\r\n\t\tRegistrarse\r\n\t</button>\r\n\t<div class=\"login-link\">\r\n\t\t¿Ya tienes cuenta? <a routerLink=\"/login\">Iniciar sesión</a>\r\n\t</div>\r\n</form>\r\n"
        },
        {
            "name": "ShellComponent",
            "id": "component-ShellComponent-ef962b32f57597740b0682adfdd647ead629e40e98cd6f9ccb2289787ccb2758481c91c1662c683721afdfca0a302b80940fcbb2c9cf353663ca06e6f5fb4b1a",
            "file": "src/app/shell/shell.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shell",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./shell.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "mainButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "TopbarButton",
                    "decorators": []
                },
                {
                    "name": "secondaryButtons",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "TopbarButton[]",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "topbarButtonClick",
                    "defaultValue": "new EventEmitter<TopbarButtonClickEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onTopbarButton",
                    "args": [
                        {
                            "name": "event",
                            "type": "TopbarButtonClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "TopbarButtonClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "TopbarComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from \"@angular/core\";\r\nimport { RouterOutlet } from \"@angular/router\";\r\nimport { TopbarComponent, TopbarButton } from \"../topbar/topbar.component\";\r\n\r\nexport type TopbarButtonClickEvent = {\r\n\tbutton: TopbarButton;\r\n\tindex: number;\r\n\ttype: \"main\" | \"secondary\";\r\n};\r\n\r\n@Component({\r\n\tselector: \"app-shell\",\r\n\tstandalone: true,\r\n\timports: [RouterOutlet, TopbarComponent],\r\n\ttemplateUrl: \"./shell.component.html\",\r\n\tstyleUrl: \"./shell.component.scss\",\r\n})\r\nexport class ShellComponent {\r\n\t@Input() title: string = \"\";\r\n\t@Input() mainButton!: TopbarButton;\r\n\t@Input() secondaryButtons: TopbarButton[] = [];\r\n\r\n\t@Output() topbarButtonClick = new EventEmitter<TopbarButtonClickEvent>();\r\n\r\n\tonTopbarButton(event: TopbarButtonClickEvent): void {\r\n\t\tthis.topbarButtonClick.emit(event);\r\n\t}\r\n}\r\n",
            "styleUrl": "./shell.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-topbar\r\n\t[title]=\"title\"\r\n\t[mainButton]=\"mainButton\"\r\n\t[secondaryButtons]=\"secondaryButtons\"\r\n\t(buttonClick)=\"onTopbarButton($event)\"\r\n></app-topbar>\r\n<main class=\"app-container main-below-topbar\">\r\n\t<router-outlet></router-outlet>\r\n</main>\r\n"
        },
        {
            "name": "SpinnerComponent",
            "id": "component-SpinnerComponent-61ab685a60f99d187ef8a4c18f95bd9e38eea02d83d77e26e99f3e7cd5611677766e44748f121c0264ed52e92daf0abd07020f84db794abd6b0991bd18e8c778",
            "file": "src/app/spinner/spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-spinner",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./spinner.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "spinnerService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpinnerService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { SpinnerService } from \"../spinner.service\";\r\n\r\n@Component({\r\n\tselector: \"app-spinner\",\r\n\tstandalone: true,\r\n\timports: [CommonModule],\r\n\ttemplateUrl: \"./spinner.component.html\",\r\n\tstyleUrl: \"./spinner.component.scss\",\r\n})\r\nexport class SpinnerComponent {\r\n\tconstructor(public spinnerService: SpinnerService) {}\r\n}\r\n",
            "styleUrl": "./spinner.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "spinnerService",
                        "type": "SpinnerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "spinnerService",
                        "type": "SpinnerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div\r\n\tclass=\"spinner-overlay\"\r\n\t*ngIf=\"spinnerService.loading$ | async\"\r\n>\r\n\t<div class=\"spinner\"></div>\r\n</div>\r\n"
        },
        {
            "name": "TopbarComponent",
            "id": "component-TopbarComponent-8d3a722c35a99b724c7afeffb13973291ad2751a0a1625803c1331b6457a44a48360f7950f752295239a4246383c9528fbc095319f6db0aa6b06115e7326cc81",
            "file": "src/app/topbar/topbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-topbar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./topbar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "mainButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "TopbarButton",
                    "decorators": []
                },
                {
                    "name": "secondaryButtons",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "TopbarButton[]",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter<{\r\n\t\tbutton: TopbarButton;\r\n\t\tindex: number;\r\n\t\ttype: \"main\" | \"secondary\";\r\n\t}>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "darkTheme",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "showMenu",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "showMenuButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMainClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSecondaryClick",
                    "args": [
                        {
                            "name": "btn",
                            "type": "TopbarButton",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "btn",
                            "type": "TopbarButton",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSecondaryClickMobile",
                    "args": [
                        {
                            "name": "btn",
                            "type": "TopbarButton",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "btn",
                            "type": "TopbarButton",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AppButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, OnInit } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { BreakpointObserver } from \"@angular/cdk/layout\";\r\nimport { AppButtonComponent } from \"../components/buttons/button.component\";\r\n\r\nexport interface TopbarButton {\r\n\tid: string;\r\n\tlabel: string;\r\n\ticon?: string;\r\n\tdisabled?: boolean;\r\n}\r\n\r\n@Component({\r\n\tselector: \"app-topbar\",\r\n\tstandalone: true,\r\n\timports: [CommonModule, AppButtonComponent],\r\n\ttemplateUrl: \"./topbar.component.html\",\r\n\tstyleUrl: \"./topbar.component.scss\",\r\n})\r\nexport class TopbarComponent implements OnInit {\r\n\t@Input() title: string = \"\";\r\n\t@Input() mainButton!: TopbarButton;\r\n\t@Input() secondaryButtons: TopbarButton[] = [];\r\n\r\n\t@Output() buttonClick = new EventEmitter<{\r\n\t\tbutton: TopbarButton;\r\n\t\tindex: number;\r\n\t\ttype: \"main\" | \"secondary\";\r\n\t}>();\r\n\r\n\tdarkTheme = false;\r\n\tshowMenuButton = false;\r\n\tshowMenu = false;\r\n\r\n\tconstructor(private breakpointObserver: BreakpointObserver) {}\r\n\r\n\tngOnInit() {\r\n\t\t// Leer preferencia de tema guardada\r\n\t\tconst savedTheme = localStorage.getItem(\"theme\");\r\n\t\tif (savedTheme === \"dark\") {\r\n\t\t\tthis.darkTheme = true;\r\n\t\t\tdocument.body.classList.add(\"dark-theme\");\r\n\t\t} else {\r\n\t\t\tthis.darkTheme = false;\r\n\t\t\tdocument.body.classList.remove(\"dark-theme\");\r\n\t\t}\r\n\t\tthis.breakpointObserver\r\n\t\t\t.observe([\"(max-width: 900px)\", \"(max-width: 600px)\"])\r\n\t\t\t.subscribe((result) => {\r\n\t\t\t\tif (result.matches) {\r\n\t\t\t\t\tthis.showMenuButton = true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.showMenuButton = false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\r\n\r\n\ttoggleTheme() {\r\n\t\tthis.darkTheme = !this.darkTheme;\r\n\t\tif (this.darkTheme) {\r\n\t\t\tdocument.body.classList.add(\"dark-theme\");\r\n\t\t\tlocalStorage.setItem(\"theme\", \"dark\");\r\n\t\t} else {\r\n\t\t\tdocument.body.classList.remove(\"dark-theme\");\r\n\t\t\tlocalStorage.setItem(\"theme\", \"light\");\r\n\t\t}\r\n\t}\r\n\r\n\ttoggleMenu() {\r\n\t\tthis.showMenu = !this.showMenu;\r\n\t}\r\n\r\n\tonMainClick() {\r\n\t\tthis.buttonClick.emit({ button: this.mainButton, index: 0, type: \"main\" });\r\n\t}\r\n\r\n\tonSecondaryClick(btn: TopbarButton, idx: number) {\r\n\t\tthis.buttonClick.emit({ button: btn, index: idx, type: \"secondary\" });\r\n\t}\r\n\r\n\tonSecondaryClickMobile(btn: TopbarButton, idx: number) {\r\n\t\tthis.onSecondaryClick(btn, idx);\r\n\t\tthis.showMenu = false;\r\n\t}\r\n}\r\n",
            "styleUrl": "./topbar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav class=\"topbar\">\r\n\t<button\r\n\t\tclass=\"main-btn\"\r\n\t\t[disabled]=\"mainButton.disabled\"\r\n\t\t(click)=\"onMainClick()\"\r\n\t>\r\n\t\t@if (mainButton.icon) {\r\n\t\t<span\r\n\t\t\tclass=\"icon\"\r\n\t\t\t[class]=\"mainButton.icon\"\r\n\t\t></span>\r\n\t\t}\r\n\t\t<span class=\"btn-label\">{{ mainButton.label }}</span>\r\n\t</button>\r\n\t<span class=\"topbar-title\">{{ title }}</span>\r\n\t<div class=\"secondary-btns\">\r\n\t\t<label class=\"theme-switch\">\r\n\t\t\t<input\r\n\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t[checked]=\"darkTheme\"\r\n\t\t\t\t(change)=\"toggleTheme()\"\r\n\t\t\t/>\r\n\t\t\t<span class=\"slider\"></span>\r\n\t\t\t<span class=\"theme-icon\"\r\n\t\t\t\t><i [class]=\"darkTheme ? 'fa fa-moon' : 'fa fa-sun'\"></i\r\n\t\t\t></span>\r\n\t\t</label>\r\n\t\t<!-- Botones secundarios normales (solo desktop) -->\r\n\t\t<ng-container\r\n\t\t\t*ngIf=\"!this.showMenuButton\"\r\n\t\t\tclass=\"secondary-btns-desktop\"\r\n\t\t>\r\n\t\t\t@for (btn of secondaryButtons; track btn; let i = $index) {\r\n\t\t\t<button\r\n\t\t\t\tclass=\"secondary-btn\"\r\n\t\t\t\t[disabled]=\"btn.disabled\"\r\n\t\t\t\t(click)=\"onSecondaryClick(btn, i)\"\r\n\t\t\t>\r\n\t\t\t\t@if (btn.icon) {\r\n\t\t\t\t<span\r\n\t\t\t\t\tclass=\"icon\"\r\n\t\t\t\t\t[class]=\"btn.icon\"\r\n\t\t\t\t></span>\r\n\t\t\t\t}\r\n\t\t\t\t<span class=\"btn-label\">{{ btn.label }}</span>\r\n\t\t\t</button>\r\n\t\t\t}\r\n\t\t</ng-container>\r\n\t\t<!-- Botón de menú (solo mobile) -->\r\n\t\t<button\r\n\t\t\tclass=\"secondary-btn menu-btn\"\r\n\t\t\t(click)=\"toggleMenu()\"\r\n\t\t>\r\n\t\t\t<span class=\"icon fa fa-ellipsis-v\"></span>\r\n\t\t</button>\r\n\t\t<!-- Menú superpuesto -->\r\n\t\t<div\r\n\t\t\tclass=\"mobile-menu\"\r\n\t\t\t*ngIf=\"showMenu\"\r\n\t\t>\r\n\t\t\t@for (btn of secondaryButtons; track $index) {\r\n\t\t\t<button\r\n\t\t\t\tclass=\"secondary-btn\"\r\n\t\t\t\t[disabled]=\"btn.disabled\"\r\n\t\t\t\t(click)=\"onSecondaryClickMobile(btn, $index)\"\r\n\t\t\t>\r\n\t\t\t\t@if (btn.icon) {\r\n\t\t\t\t<span\r\n\t\t\t\t\tclass=\"icon\"\r\n\t\t\t\t\t[class]=\"btn.icon\"\r\n\t\t\t\t></span>\r\n\t\t\t\t}\r\n\t\t\t\t<span class=\"btn-label\">{{ btn.label }}</span>\r\n\t\t\t</button>\r\n\t\t\t}\r\n\t\t</div>\r\n\t</div>\r\n</nav>\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n\tproviders: [\r\n\t\tprovideZoneChangeDetection({ eventCoalescing: true }),\r\n\t\tprovideRouter(routes),\r\n\t\tprovideHttpClient(\r\n\t\t\twithInterceptors([authInterceptorFn, spinnerInterceptorFn])\r\n\t\t),\r\n\t\tprovideStore(),\r\n\t\tprovideState({ name: \"auth\", reducer: authReducer }),\r\n\t\tprovideEffects([AuthEffects]),\r\n\t\tprovideStoreDevtools({\r\n\t\t\tmaxAge: 25,\r\n\t\t\tautoPause: true,\r\n\t\t\tlogOnly: false,\r\n\t\t}),\r\n\t\tprovideAppInitializer(() => {\r\n\t\t\tconst authService = inject(AuthService);\r\n\t\t\treturn authService.loadUserFromToken();\r\n\t\t}),\r\n\t],\r\n}"
            },
            {
                "name": "authInterceptorFn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/auth.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\r\n\tconst authService = inject(AuthService);\r\n\tconst token = authService.getToken();\r\n\tlet authReq = req;\r\n\tif (token) {\r\n\t\tauthReq = req.clone({\r\n\t\t\tsetHeaders: {\r\n\t\t\t\tAuthorization: `Bearer ${token}`,\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\treturn next(authReq);\r\n}"
            },
            {
                "name": "authReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/state/auth.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n\tinitialAuthState,\r\n\ton(AuthActions.LoginActions.success, (state, action) => ({\r\n\t\t...state,\r\n\t\ttoken: action.token,\r\n\t\trefreshToken: action.refreshToken,\r\n\t\tuserData: action.userData,\r\n\t\tloading: false,\r\n\t})),\r\n\ton(AuthActions.setAuthTokens, (state, { token, refreshToken }) => ({\r\n\t\t...state,\r\n\t\ttoken,\r\n\t\trefreshToken,\r\n\t})),\r\n\ton(AuthActions.clearAuth, () => initialAuthState),\r\n\ton(AuthActions.setUserData, (state, { userData }) => ({\r\n\t\t...state,\r\n\t\tuserData,\r\n\t})),\r\n\ton(AuthActions.loadUserFromToken, (state) => ({ ...state, loading: true })),\r\n\ton(AuthActions.loadUserFromTokenSuccess, (state, { userData }) => ({\r\n\t\t...state,\r\n\t\tuserData,\r\n\t\tloading: false,\r\n\t})),\r\n\ton(AuthActions.loadUserFromTokenFailure, (state) => ({\r\n\t\t...state,\r\n\t\tuserData: null,\r\n\t\tloading: false,\r\n\t}))\r\n)"
            },
            {
                "name": "clearAuth",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/state/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\"[Auth] Clear Auth\")"
            },
            {
                "name": "initialAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/state/auth.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AuthState",
                "defaultValue": "{\r\n\ttoken: null,\r\n\trefreshToken: null,\r\n\tuserData: null,\r\n\tloading: false,\r\n}"
            },
            {
                "name": "loadUserFromToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/state/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\"[Auth] Load User From Token\")"
            },
            {
                "name": "loadUserFromTokenFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/state/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n\t\"[Auth] Load User From Token Failure\"\r\n)"
            },
            {
                "name": "loadUserFromTokenSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/state/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n\t\"[Auth] Load User From Token Success\",\r\n\tprops<{ userData: UserData }>()\r\n)"
            },
            {
                "name": "LoginActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/state/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createActionGroup({\r\n\tsource: \"Auth\",\r\n\tevents: {\r\n\t\trequest: props<{ email: string; password: string }>(),\r\n\t\tsuccess: props<{\r\n\t\t\ttoken: string;\r\n\t\t\trefreshToken: string;\r\n\t\t\tuserData: UserData;\r\n\t\t}>(),\r\n\t\tfailure: props<{ error: any }>(),\r\n\t},\r\n})"
            },
            {
                "name": "origSetAttribute",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/main.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "document.body.setAttribute"
            },
            {
                "name": "selectAuthLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/state/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n\tselectAuthState,\r\n\t(state) => state.loading\r\n)"
            },
            {
                "name": "selectAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/state/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<AuthState>(\"auth\")"
            },
            {
                "name": "selectAuthToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/state/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n\tselectAuthState,\r\n\t(state) => state.token\r\n)"
            },
            {
                "name": "selectRefreshToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/state/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n\tselectAuthState,\r\n\t(state) => state.refreshToken\r\n)"
            },
            {
                "name": "selectUserData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/state/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n\tselectAuthState,\r\n\t(state) => state.userData\r\n)"
            },
            {
                "name": "setAuthTokens",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/state/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n\t\"[Auth] Set Tokens\",\r\n\tprops<{ token: string; refreshToken: string }>()\r\n)"
            },
            {
                "name": "setUserData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/state/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n\t\"[Auth] Set User Data\",\r\n\tprops<{ userData: UserData }>()\r\n)"
            },
            {
                "name": "spinnerInterceptorFn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/spinner.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\r\n\tconst spinner = inject(SpinnerService);\r\n\tspinner.show();\r\n\treturn next(req).pipe(finalize(() => spinner.hide()));\r\n}"
            },
            {
                "name": "TOPBAR_BUTTONS_IDS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/topbar/topbar-buttons-ids.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n\thomeButton: \"home-button\",\r\n\tprofileButton: \"profile-button\",\r\n\tloginButton: \"login-button\",\r\n\tlogoutButton: \"logout-button\",\r\n\tregisterButton: \"register-button\",\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "TopbarButton",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ButtonWithId",
                "file": "src/app/components/buttons/button.interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "TopbarButtonClickEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shell/shell.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TopbarButtonClickEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ButtonClickEvent",
                "file": "src/app/components/buttons/button.interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n\tproviders: [\r\n\t\tprovideZoneChangeDetection({ eventCoalescing: true }),\r\n\t\tprovideRouter(routes),\r\n\t\tprovideHttpClient(\r\n\t\t\twithInterceptors([authInterceptorFn, spinnerInterceptorFn])\r\n\t\t),\r\n\t\tprovideStore(),\r\n\t\tprovideState({ name: \"auth\", reducer: authReducer }),\r\n\t\tprovideEffects([AuthEffects]),\r\n\t\tprovideStoreDevtools({\r\n\t\t\tmaxAge: 25,\r\n\t\t\tautoPause: true,\r\n\t\t\tlogOnly: false,\r\n\t\t}),\r\n\t\tprovideAppInitializer(() => {\r\n\t\t\tconst authService = inject(AuthService);\r\n\t\t\treturn authService.loadUserFromToken();\r\n\t\t}),\r\n\t],\r\n}"
                }
            ],
            "src/app/auth/auth.interceptor.ts": [
                {
                    "name": "authInterceptorFn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/auth.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\r\n\tconst authService = inject(AuthService);\r\n\tconst token = authService.getToken();\r\n\tlet authReq = req;\r\n\tif (token) {\r\n\t\tauthReq = req.clone({\r\n\t\t\tsetHeaders: {\r\n\t\t\t\tAuthorization: `Bearer ${token}`,\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\treturn next(authReq);\r\n}"
                }
            ],
            "src/app/auth/state/auth.reducer.ts": [
                {
                    "name": "authReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/state/auth.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n\tinitialAuthState,\r\n\ton(AuthActions.LoginActions.success, (state, action) => ({\r\n\t\t...state,\r\n\t\ttoken: action.token,\r\n\t\trefreshToken: action.refreshToken,\r\n\t\tuserData: action.userData,\r\n\t\tloading: false,\r\n\t})),\r\n\ton(AuthActions.setAuthTokens, (state, { token, refreshToken }) => ({\r\n\t\t...state,\r\n\t\ttoken,\r\n\t\trefreshToken,\r\n\t})),\r\n\ton(AuthActions.clearAuth, () => initialAuthState),\r\n\ton(AuthActions.setUserData, (state, { userData }) => ({\r\n\t\t...state,\r\n\t\tuserData,\r\n\t})),\r\n\ton(AuthActions.loadUserFromToken, (state) => ({ ...state, loading: true })),\r\n\ton(AuthActions.loadUserFromTokenSuccess, (state, { userData }) => ({\r\n\t\t...state,\r\n\t\tuserData,\r\n\t\tloading: false,\r\n\t})),\r\n\ton(AuthActions.loadUserFromTokenFailure, (state) => ({\r\n\t\t...state,\r\n\t\tuserData: null,\r\n\t\tloading: false,\r\n\t}))\r\n)"
                },
                {
                    "name": "initialAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/state/auth.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthState",
                    "defaultValue": "{\r\n\ttoken: null,\r\n\trefreshToken: null,\r\n\tuserData: null,\r\n\tloading: false,\r\n}"
                }
            ],
            "src/app/auth/state/auth.actions.ts": [
                {
                    "name": "clearAuth",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/state/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\"[Auth] Clear Auth\")"
                },
                {
                    "name": "loadUserFromToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/state/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\"[Auth] Load User From Token\")"
                },
                {
                    "name": "loadUserFromTokenFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/state/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n\t\"[Auth] Load User From Token Failure\"\r\n)"
                },
                {
                    "name": "loadUserFromTokenSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/state/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n\t\"[Auth] Load User From Token Success\",\r\n\tprops<{ userData: UserData }>()\r\n)"
                },
                {
                    "name": "LoginActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/state/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createActionGroup({\r\n\tsource: \"Auth\",\r\n\tevents: {\r\n\t\trequest: props<{ email: string; password: string }>(),\r\n\t\tsuccess: props<{\r\n\t\t\ttoken: string;\r\n\t\t\trefreshToken: string;\r\n\t\t\tuserData: UserData;\r\n\t\t}>(),\r\n\t\tfailure: props<{ error: any }>(),\r\n\t},\r\n})"
                },
                {
                    "name": "setAuthTokens",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/state/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n\t\"[Auth] Set Tokens\",\r\n\tprops<{ token: string; refreshToken: string }>()\r\n)"
                },
                {
                    "name": "setUserData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/state/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n\t\"[Auth] Set User Data\",\r\n\tprops<{ userData: UserData }>()\r\n)"
                }
            ],
            "src/main.ts": [
                {
                    "name": "origSetAttribute",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/main.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "document.body.setAttribute"
                }
            ],
            "src/app/auth/state/auth.selectors.ts": [
                {
                    "name": "selectAuthLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/state/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n\tselectAuthState,\r\n\t(state) => state.loading\r\n)"
                },
                {
                    "name": "selectAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/state/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AuthState>(\"auth\")"
                },
                {
                    "name": "selectAuthToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/state/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n\tselectAuthState,\r\n\t(state) => state.token\r\n)"
                },
                {
                    "name": "selectRefreshToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/state/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n\tselectAuthState,\r\n\t(state) => state.refreshToken\r\n)"
                },
                {
                    "name": "selectUserData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/state/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n\tselectAuthState,\r\n\t(state) => state.userData\r\n)"
                }
            ],
            "src/app/auth/spinner.interceptor.ts": [
                {
                    "name": "spinnerInterceptorFn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/spinner.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\r\n\tconst spinner = inject(SpinnerService);\r\n\tspinner.show();\r\n\treturn next(req).pipe(finalize(() => spinner.hide()));\r\n}"
                }
            ],
            "src/app/topbar/topbar-buttons-ids.ts": [
                {
                    "name": "TOPBAR_BUTTONS_IDS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/topbar/topbar-buttons-ids.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n\thomeButton: \"home-button\",\r\n\tprofileButton: \"profile-button\",\r\n\tloginButton: \"login-button\",\r\n\tlogoutButton: \"logout-button\",\r\n\tregisterButton: \"register-button\",\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/components/buttons/button.interfaces.ts": [
                {
                    "name": "TopbarButton",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ButtonWithId",
                    "file": "src/app/components/buttons/button.interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "TopbarButtonClickEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ButtonClickEvent",
                    "file": "src/app/components/buttons/button.interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/shell/shell.component.ts": [
                {
                    "name": "TopbarButtonClickEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shell/shell.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authInterceptorFn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthResponse",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginRequest",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegisterRequest",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/spinner.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "spinnerInterceptorFn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clearAuth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadUserFromToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadUserFromTokenFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadUserFromTokenSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoginActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setAuthTokens",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setUserData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectRefreshToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUserData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/buttons/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/buttons/button.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ButtonBase",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/buttons/button.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ButtonClickEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/buttons/button.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ButtonWithId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/buttons/button.interfaces.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TopbarButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/buttons/button.interfaces.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TopbarButtonClickEvent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/navigation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NavigationService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/navigation.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NavigationState",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/perfil/admin-canchas.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminCanchasComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/perfil/perfil.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PerfilComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/shell/shell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shell/shell.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TopbarButtonClickEvent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/spinner.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SpinnerService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/spinner/spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/topbar/topbar-buttons-ids.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOPBAR_BUTTONS_IDS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/topbar/topbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TopbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/topbar/topbar.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TopbarButton",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/main.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "origSetAttribute",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}